# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:14:23+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    confloat,
    conint,
    constr,
)


class BettingMatchStatus(Enum):
    canceled = 'canceled'
    finished = 'finished'
    live = 'live'
    not_booked = 'not_booked'
    pending = 'pending'
    postponed = 'postponed'
    pre_match = 'pre_match'
    settled = 'settled'


class BlueprintID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class BlueprintName(RootModel[str]):
    root: str


class CSGOGameID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class CSGOIsRoundWinner(RootModel[bool]):
    root: bool = Field(
        ...,
        description='For Counter Strike: Global Offensive: whether team has won the round',
    )


class CSGOIsTerrorist(RootModel[bool]):
    root: bool = Field(
        ...,
        description='For Counter Strike: Global Offensive: whether team is on T side',
    )


class CSGOMapID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class CSGOMapImageURL(RootModel[AnyUrl]):
    root: AnyUrl


class CSGOMapName(RootModel[str]):
    root: str


class CSGONumberOfRounds(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ...,
        description='For Counter Strike: Global Offensive: number of rounds for a game',
    )


class CSGOOutcome(Enum):
    defused = 'defused'
    eliminated = 'eliminated'
    exploded = 'exploded'
    planted_eliminated = 'planted_eliminated'
    timeout = 'timeout'


class CSGORoundID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class CSGOWeaponID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class CSGOWeaponSlug(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class CurrentVideogame(BaseModel):
    pass


class DeletionIncidentChangeType(Enum):
    deletion = 'deletion'


class Dota2AbilityID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class Dota2AbilitySlug(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class Dota2GameID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class Dota2HeroID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class Dota2HeroSlug(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class Dota2ItemID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class Dota2ItemSlug(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class Id(Enum):
    int_3 = 3


class Name(Enum):
    CS_GO = 'CS:GO'


class Slug(Enum):
    cs_go = 'cs-go'


class Id1(Enum):
    int_23 = 23


class Name1(Enum):
    Call_of_Duty = 'Call of Duty'


class Slug1(Enum):
    cod_mw = 'cod-mw'


class Id2(Enum):
    int_4 = 4


class Name2(Enum):
    Dota_2 = 'Dota 2'


class Slug2(Enum):
    dota_2 = 'dota-2'


class Id3(Enum):
    int_25 = 25


class Name3(Enum):
    FIFA = 'FIFA'


class Slug3(Enum):
    fifa = 'fifa'


class Id4(Enum):
    int_21 = 21


class Name4(Enum):
    Fortnite = 'Fortnite'


class Slug4(Enum):
    fortnite = 'fortnite'


class Id5(Enum):
    int_1 = 1


class Name5(Enum):
    LoL = 'LoL'


class Slug5(Enum):
    league_of_legends = 'league-of-legends'


class Id6(Enum):
    int_14 = 14


class Name6(Enum):
    Overwatch = 'Overwatch'


class Slug6(Enum):
    ow = 'ow'


class Id7(Enum):
    int_20 = 20


class Name7(Enum):
    PUBG = 'PUBG'


class Slug7(Enum):
    pubg = 'pubg'


class Id8(Enum):
    int_24 = 24


class Name8(Enum):
    Rainbow_6_Siege = 'Rainbow 6 Siege'


class Slug8(Enum):
    r6_siege = 'r6-siege'


class Id9(Enum):
    int_22 = 22


class Name9(Enum):
    Rocket_League = 'Rocket League'


class Slug9(Enum):
    rl = 'rl'


class Id10(Enum):
    int_26 = 26


class Name10(Enum):
    Valorant = 'Valorant'


class Slug10(Enum):
    valorant = 'valorant'


class EventBeginAt(RootModel[datetime]):
    root: datetime


class EventEndAt(RootModel[datetime]):
    root: datetime


class EventID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class EventIsActive(RootModel[bool]):
    root: bool = Field(..., description='Whether event is active')


class EventStreamURL(RootModel[AnyUrl]):
    root: AnyUrl


class GameBeginAt(RootModel[datetime]):
    root: datetime


class GameComplete(RootModel[bool]):
    root: bool = Field(
        ..., description="Whether game data are complete and won't change"
    )


class GameCount(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(..., description='Number of games')


class GameDetailedStats(RootModel[bool]):
    root: bool = Field(..., description='Whether the game offers full stats')


class GameEndAt(RootModel[datetime]):
    root: datetime


class GameIsFinished(RootModel[bool]):
    root: bool = Field(..., description='Whether game is finished')


class GameIsForfeit(RootModel[bool]):
    root: bool = Field(..., description='Whether game is forfeit')


class GameLength(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class GamePosition(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class GameStatus(Enum):
    finished = 'finished'
    not_played = 'not_played'
    not_started = 'not_started'
    running = 'running'


class GameVideoUrl(RootModel[AnyUrl]):
    root: AnyUrl


class IncidentChangeType(Enum):
    creation = 'creation'
    deletion = 'deletion'
    update = 'update'


class IncidentDeletedAt(RootModel[datetime]):
    root: datetime


class IncidentDeletionReasonDeleted(Enum):
    Model_deleted = 'Model deleted'


class IncidentDeletionReasonMerged(RootModel[constr(pattern=r'^Merged with [0-9]+$')]):
    root: constr(pattern=r'^Merged with [0-9]+$') = Field(
        ..., description='The entity has been merged with another one of the same type.'
    )


class IncidentDeletionReasonReplaced(
    RootModel[constr(pattern=r'^Replaced by (serie|tournament) [0-9]+$')]
):
    root: constr(pattern=r'^Replaced by (serie|tournament) [0-9]+$') = Field(
        ...,
        description='The entity has been replaced with another one of another type.',
    )


class IncidentModifiedAt(RootModel[datetime]):
    root: datetime


class Type(Enum):
    league = 'league'


class Type1(Enum):
    match = 'match'


class Type2(Enum):
    player = 'player'


class Type3(Enum):
    serie = 'serie'


class Type4(Enum):
    team = 'team'


class Type5(Enum):
    tournament = 'tournament'


class IncidentType(Enum):
    league = 'league'
    match = 'match'
    player = 'player'
    serie = 'serie'
    team = 'team'
    tournament = 'tournament'


class LeagueID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class LeagueImageURL(RootModel[AnyUrl]):
    root: AnyUrl


class LeagueModifiedAt(RootModel[datetime]):
    root: datetime


class LeagueName(RootModel[str]):
    root: str


class LeagueSlug(RootModel[constr(pattern=r'^[a-z0-9:_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9:_-]+$', min_length=1)


class LeagueURL(RootModel[AnyUrl]):
    root: AnyUrl


class Id11(Enum):
    int_3 = 3


class Name11(Enum):
    CS_GO = 'CS:GO'


class Slug11(Enum):
    cs_go = 'cs-go'


class Id12(Enum):
    int_23 = 23


class Name12(Enum):
    Call_of_Duty = 'Call of Duty'


class Slug12(Enum):
    cod_mw = 'cod-mw'


class Id13(Enum):
    int_4 = 4


class Name13(Enum):
    Dota_2 = 'Dota 2'


class Slug13(Enum):
    dota_2 = 'dota-2'


class Id14(Enum):
    int_25 = 25


class Name14(Enum):
    FIFA = 'FIFA'


class Slug14(Enum):
    fifa = 'fifa'


class Id15(Enum):
    int_21 = 21


class Name15(Enum):
    Fortnite = 'Fortnite'


class Slug15(Enum):
    fortnite = 'fortnite'


class Id16(Enum):
    int_1 = 1


class Name16(Enum):
    LoL = 'LoL'


class Slug16(Enum):
    league_of_legends = 'league-of-legends'


class Id17(Enum):
    int_14 = 14


class Name17(Enum):
    Overwatch = 'Overwatch'


class Slug17(Enum):
    ow = 'ow'


class Id18(Enum):
    int_20 = 20


class Name18(Enum):
    PUBG = 'PUBG'


class Slug18(Enum):
    pubg = 'pubg'


class Id19(Enum):
    int_24 = 24


class Name19(Enum):
    Rainbow_6_Siege = 'Rainbow 6 Siege'


class Slug19(Enum):
    r6_siege = 'r6-siege'


class Id20(Enum):
    int_22 = 22


class Name20(Enum):
    Rocket_League = 'Rocket League'


class Slug20(Enum):
    rl = 'rl'


class Id21(Enum):
    int_26 = 26


class Name21(Enum):
    Valorant = 'Valorant'


class Slug21(Enum):
    valorant = 'valorant'


class LiveBeginAt(RootModel[datetime]):
    root: datetime


class LiveExpectedBeginAt(RootModel[datetime]):
    root: datetime


class LiveIsOpen(RootModel[bool]):
    root: bool = Field(..., description='Whether live is open')


class LiveLastActive(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ...,
        description='Timestamp in milliseconds (since January 1, 1970 00:00:00 UTC)',
    )


class LiveType(Enum):
    events = 'events'
    frames = 'frames'


class LiveUrl(RootModel[AnyUrl]):
    root: AnyUrl


class LoLBaronKills(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class LoLChampionID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class LoLDragonKills(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class LoLGameID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class LoLGold(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class LoLHeraldKills(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class LoLInhibitorKills(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class LoLItemID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class LoLMasteryID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class LoLRuneID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class LoLSpellID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class LoLTeamColor(Enum):
    blue = 'blue'
    red = 'red'


class LoLTeamGotFirstBaron(RootModel[bool]):
    root: bool = Field(
        ..., description='For League-of-Legends: whether team got first baron Nashor'
    )


class LoLTeamGotFirstBlood(RootModel[bool]):
    root: bool = Field(
        ..., description='For League-of-Legends: whether team got first blood'
    )


class LoLTeamGotFirstDragon(RootModel[bool]):
    root: bool = Field(
        ..., description='For League-of-Legends: whether team got first dragon'
    )


class LoLTeamGotFirstHerald(RootModel[bool]):
    root: bool = Field(
        ..., description='For League-of-Legends: whether team got first herald'
    )


class LoLTeamGotFirstInhibitor(RootModel[bool]):
    root: bool = Field(
        ..., description='For League-of-Legends: whether team got first inhibitor'
    )


class LoLTeamGotFirstTower(RootModel[bool]):
    root: bool = Field(
        ..., description='For League-of-Legends: whether team got first tower'
    )


class LoLTeamKills(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class LoLTowerKills(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class LoLVersionName(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MarketID(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class MarketLine(RootModel[str]):
    root: str


class MarketMargin(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class MarketName(RootModel[str]):
    root: str


class MarketStatus(Enum):
    deactivated = 'deactivated'
    new = 'new'
    settled = 'settled'
    suspended = 'suspended'


class MarketTemplate(RootModel[str]):
    root: str


class MarketsCreated(RootModel[bool]):
    root: bool = Field(..., description='Whether markets has been created')


class MarketsUpdatedAt(RootModel[datetime]):
    root: datetime


class MatchBeginAt(RootModel[datetime]):
    root: datetime


class MatchBookable(RootModel[bool]):
    root: bool = Field(..., description='Whether match can be booked')


class MatchBooked(RootModel[bool]):
    root: bool = Field(..., description='Whether match has been booked')


class MatchCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class MatchDetailedStats(RootModel[bool]):
    root: bool = Field(..., description='Whether the match offers full stats')


class MatchEmbedLiveVideoURL(RootModel[AnyUrl]):
    root: AnyUrl


class MatchEmbedLiveVideoURLDeprecated(RootModel[AnyUrl]):
    root: AnyUrl = Field(..., description='Use `.streams.official.embed_url` instead')


class MatchEndAt(RootModel[datetime]):
    root: datetime


class MatchID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MatchIsDraw(RootModel[bool]):
    root: bool = Field(..., description='Whether result of the match is a draw')


class MatchIsForfeit(RootModel[bool]):
    root: bool = Field(..., description='Whether match was forfeited')


class MatchIsRescheduled(RootModel[bool]):
    root: bool = Field(..., description='Whether match has been rescheduled')


class MatchLiveAvailable(RootModel[bool]):
    root: bool = Field(..., description='Whether live is available')


class MatchLiveIsSupported(RootModel[bool]):
    root: bool = Field(..., description='Whether live is supported')


class MatchLiveOpensAt(RootModel[datetime]):
    root: datetime


class MatchLiveURL(RootModel[AnyUrl]):
    root: AnyUrl


class MatchLiveVideoRawURL(RootModel[AnyUrl]):
    root: AnyUrl


class MatchLocalizedStream(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    embed_url: MatchEmbedLiveVideoURL = Field(..., title='MatchEmbedLiveVideoURL')
    raw_url: MatchLiveVideoRawURL = Field(..., title='MatchLiveVideoRawURL')


class MatchLocalizedStreams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    english: MatchLocalizedStream
    official: MatchLocalizedStream
    russian: MatchLocalizedStream


class MatchModifiedAt(RootModel[datetime]):
    root: datetime


class MatchName(RootModel[str]):
    root: str


class MatchOfficialStreamURL(RootModel[AnyUrl]):
    root: AnyUrl = Field(..., description='Use `.streams.official.raw_url` instead')


class MatchOriginalScheduledAt(RootModel[datetime]):
    root: datetime


class MatchPandaScoreReviewed(RootModel[bool]):
    root: bool = Field(..., description='Whether PandaScore reviewed the match')


class MatchScheduledAt(RootModel[datetime]):
    root: datetime


class MatchScore(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class MatchSettled(RootModel[bool]):
    root: bool = Field(..., description='Whether match has been settled')


class MatchSlug(RootModel[constr(pattern=r'^[ a-zA-Z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[ a-zA-Z0-9_-]+$', min_length=1)


class MatchStatus(Enum):
    canceled = 'canceled'
    finished = 'finished'
    not_started = 'not_started'
    postponed = 'postponed'
    running = 'running'


class MatchType(Enum):
    best_of = 'best_of'
    custom = 'custom'
    first_to = 'first_to'
    ow_best_of = 'ow_best_of'


class OpponentType(Enum):
    Player = 'Player'
    Team = 'Team'


class OpponentTypePlayer(Enum):
    Player = 'Player'


class OpponentTypeTeam(Enum):
    Team = 'Team'


class OwGameID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class OwHeroID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class OwHeroSlug(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class OwMapID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class OwMapSlug(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class PUBGGameID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PlayerBirthYear(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0) = Field(
        ...,
        description='Not present if the client did not subscribe to the appropriate plan.',
    )


class PlayerBirthday(RootModel[str]):
    root: str = Field(
        ...,
        description='Not present if the client did not subscribe to the appropriate plan.',
    )


class PlayerFirstName(RootModel[str]):
    root: str


class PlayerHometown(RootModel[str]):
    root: str


class PlayerID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PlayerImageURL(RootModel[AnyUrl]):
    root: AnyUrl


class PlayerLastName(RootModel[str]):
    root: str


class PlayerName(RootModel[str]):
    root: str


class PlayerNationality(RootModel[str]):
    root: str


class PlayerRoleSlug(RootModel[str]):
    root: str


class PlayerSlug(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class PreviousMatchType(Enum):
    loser = 'loser'
    winner = 'winner'


class SelectionLine(RootModel[str]):
    root: str


class SelectionName(RootModel[str]):
    root: str


class SelectionPosition(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class SelectionProbability(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class SelectionProbabilityWithMargin(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class SelectionResult(Enum):
    lose = 'lose'
    void = 'void'
    win = 'win'


class SelectionTemplate(RootModel[str]):
    root: str


class SerieBeginAt(RootModel[datetime]):
    root: datetime


class SerieDescription(RootModel[str]):
    root: str


class SerieEndAt(RootModel[datetime]):
    root: datetime


class SerieFullName(RootModel[str]):
    root: str


class SerieID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class SerieModifiedAt(RootModel[datetime]):
    root: datetime


class SerieName(RootModel[str]):
    root: str


class SerieSeason(RootModel[str]):
    root: str


class SerieSlug(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class SerieTier(RootModel[str]):
    root: str


class SerieYear(RootModel[conint(ge=2012)]):
    root: conint(ge=2012)


class StandingLosses(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class StandingRank(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class StandingTies(RootModel[conint(ge=1)]):
    root: conint(ge=1) = Field(
        ..., description='Only present if ties occured during the tournament'
    )


class StreamEmbedURL(RootModel[AnyUrl]):
    root: AnyUrl = Field(..., description='URL to embed in an iframe.')


class StreamIsMain(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Whether it is the main stream. Main stream is always official.',
    )


class StreamIsOfficial(RootModel[bool]):
    root: bool = Field(..., description='Whether it is an official broadcast.')


class StreamLanguage(Enum):
    aa = 'aa'
    ab = 'ab'
    ae = 'ae'
    af = 'af'
    ak = 'ak'
    am = 'am'
    an = 'an'
    ar = 'ar'
    as_ = 'as'
    av = 'av'
    ay = 'ay'
    az = 'az'
    ba = 'ba'
    be = 'be'
    bg = 'bg'
    bh = 'bh'
    bi = 'bi'
    bm = 'bm'
    bn = 'bn'
    bo = 'bo'
    br = 'br'
    bs = 'bs'
    ca = 'ca'
    ce = 'ce'
    ch = 'ch'
    co = 'co'
    cr = 'cr'
    cs = 'cs'
    cu = 'cu'
    cv = 'cv'
    cy = 'cy'
    da = 'da'
    de = 'de'
    dv = 'dv'
    dz = 'dz'
    ee = 'ee'
    el = 'el'
    en = 'en'
    eo = 'eo'
    es = 'es'
    et = 'et'
    eu = 'eu'
    fa = 'fa'
    ff = 'ff'
    fi = 'fi'
    fj = 'fj'
    fo = 'fo'
    fr = 'fr'
    fy = 'fy'
    ga = 'ga'
    gd = 'gd'
    gl = 'gl'
    gn = 'gn'
    gu = 'gu'
    gv = 'gv'
    ha = 'ha'
    he = 'he'
    hi = 'hi'
    ho = 'ho'
    hr = 'hr'
    ht = 'ht'
    hu = 'hu'
    hy = 'hy'
    hz = 'hz'
    ia = 'ia'
    id = 'id'
    ie = 'ie'
    ig = 'ig'
    ii = 'ii'
    ik = 'ik'
    io = 'io'
    is_ = 'is'
    it = 'it'
    iu = 'iu'
    ja = 'ja'
    jv = 'jv'
    ka = 'ka'
    kg = 'kg'
    ki = 'ki'
    kj = 'kj'
    kk = 'kk'
    kl = 'kl'
    km = 'km'
    kn = 'kn'
    ko = 'ko'
    kr = 'kr'
    ks = 'ks'
    ku = 'ku'
    kv = 'kv'
    kw = 'kw'
    ky = 'ky'
    la = 'la'
    lb = 'lb'
    lg = 'lg'
    li = 'li'
    ln = 'ln'
    lo = 'lo'
    lt = 'lt'
    lu = 'lu'
    lv = 'lv'
    mg = 'mg'
    mh = 'mh'
    mi = 'mi'
    mk = 'mk'
    ml = 'ml'
    mn = 'mn'
    mr = 'mr'
    ms = 'ms'
    mt = 'mt'
    my = 'my'
    na = 'na'
    nb = 'nb'
    nd = 'nd'
    ne = 'ne'
    ng = 'ng'
    nl = 'nl'
    nn = 'nn'
    no = 'no'
    nr = 'nr'
    nv = 'nv'
    ny = 'ny'
    oc = 'oc'
    oj = 'oj'
    om = 'om'
    or_ = 'or'
    os = 'os'
    pa = 'pa'
    pi = 'pi'
    pl = 'pl'
    ps = 'ps'
    pt = 'pt'
    qu = 'qu'
    rm = 'rm'
    rn = 'rn'
    ro = 'ro'
    ru = 'ru'
    rw = 'rw'
    sa = 'sa'
    sc = 'sc'
    sd = 'sd'
    se = 'se'
    sg = 'sg'
    si = 'si'
    sk = 'sk'
    sl = 'sl'
    sm = 'sm'
    sn = 'sn'
    so = 'so'
    sq = 'sq'
    sr = 'sr'
    ss = 'ss'
    st = 'st'
    su = 'su'
    sv = 'sv'
    sw = 'sw'
    ta = 'ta'
    te = 'te'
    tg = 'tg'
    th = 'th'
    ti = 'ti'
    tk = 'tk'
    tl = 'tl'
    tn = 'tn'
    to = 'to'
    tr = 'tr'
    ts = 'ts'
    tt = 'tt'
    tw = 'tw'
    ty = 'ty'
    ug = 'ug'
    uk = 'uk'
    ur = 'ur'
    uz = 'uz'
    ve = 've'
    vi = 'vi'
    vo = 'vo'
    wa = 'wa'
    wo = 'wo'
    xh = 'xh'
    yi = 'yi'
    yo = 'yo'
    za = 'za'
    zh = 'zh'
    zu = 'zu'


class StreamURL(RootModel[AnyUrl]):
    root: AnyUrl = Field(..., description='URL to the stream on host website.')


class TeamAcronym(RootModel[str]):
    root: str


class TeamID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class TeamImageURL(RootModel[AnyUrl]):
    root: AnyUrl


class TeamLocation(RootModel[str]):
    root: str = Field(..., description="The team's organization location")


class TeamModifiedAt(RootModel[datetime]):
    root: datetime


class TeamName(RootModel[str]):
    root: str


class TeamSlug(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class TournamentBeginAt(RootModel[datetime]):
    root: datetime


class TournamentEndAt(RootModel[datetime]):
    root: datetime


class TournamentID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class TournamentLiveSupported(RootModel[bool]):
    root: bool = Field(..., description='Whether live is supported')


class TournamentModifiedAt(RootModel[datetime]):
    root: datetime


class TournamentName(RootModel[str]):
    root: str


class TournamentPrizepool(RootModel[str]):
    root: str


class TournamentSlug(RootModel[constr(pattern=r'^[a-z0-9_-]+$', min_length=1)]):
    root: constr(pattern=r'^[a-z0-9_-]+$', min_length=1)


class VideogameID(Enum):
    integer_1 = 1
    integer_3 = 3
    integer_4 = 4
    integer_14 = 14
    integer_20 = 20
    integer_22 = 22
    integer_23 = 23
    integer_24 = 24
    integer_25 = 25
    integer_26 = 26


class VideogameSlug(Enum):
    cod_mw = 'cod-mw'
    cs_go = 'cs-go'
    dota_2 = 'dota-2'
    fifa = 'fifa'
    league_of_legends = 'league-of-legends'
    ow = 'ow'
    pubg = 'pubg'
    r6_siege = 'r6-siege'
    rl = 'rl'
    valorant = 'valorant'


class VideogameTitleID(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class VideogameTitleName(RootModel[str]):
    root: str


class VideogameVersion(RootModel[constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$')]):
    root: constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$')


class VideogameVersionIsCurrent(RootModel[bool]):
    root: bool = Field(..., description='Whether this videogame version is current')


class Id22(Enum):
    int_3 = 3


class Name22(Enum):
    CS_GO = 'CS:GO'


class Slug22(Enum):
    cs_go = 'cs-go'


class Id23(Enum):
    int_23 = 23


class Name23(Enum):
    Call_of_Duty = 'Call of Duty'


class Slug23(Enum):
    cod_mw = 'cod-mw'


class Id24(Enum):
    int_4 = 4


class Name24(Enum):
    Dota_2 = 'Dota 2'


class Slug24(Enum):
    dota_2 = 'dota-2'


class Id25(Enum):
    int_25 = 25


class Name25(Enum):
    FIFA = 'FIFA'


class Slug25(Enum):
    fifa = 'fifa'


class Id26(Enum):
    int_1 = 1


class Name26(Enum):
    LoL = 'LoL'


class Slug26(Enum):
    league_of_legends = 'league-of-legends'


class Id27(Enum):
    int_14 = 14


class Name27(Enum):
    Overwatch = 'Overwatch'


class Slug27(Enum):
    ow = 'ow'


class Id28(Enum):
    int_20 = 20


class Name28(Enum):
    PUBG = 'PUBG'


class Slug28(Enum):
    pubg = 'pubg'


class Id29(Enum):
    int_24 = 24


class Name29(Enum):
    Rainbow_6_Siege = 'Rainbow 6 Siege'


class Slug29(Enum):
    r6_siege = 'r6-siege'


class Id30(Enum):
    int_22 = 22


class Name30(Enum):
    Rocket_League = 'Rocket League'


class Slug30(Enum):
    rl = 'rl'


class Id31(Enum):
    int_26 = 26


class Name31(Enum):
    Valorant = 'Valorant'


class Slug31(Enum):
    valorant = 'valorant'


class FilterOverLeagues(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[List[LeagueID]] = Field(None, min_length=1)
    modified_at: Optional[List[LeagueModifiedAt]] = Field(None, min_length=1)
    name: Optional[List[LeagueName]] = Field(None, min_length=1)
    slug: Optional[List[LeagueSlug]] = Field(None, min_length=1)
    url: Optional[List[LeagueURL]] = Field(None, min_length=1)


class FilterOverPlayers(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    birth_year: Optional[List[PlayerBirthYear]] = Field(None, min_length=1)
    birthday: Optional[List[PlayerBirthday]] = Field(None, min_length=1)
    first_name: Optional[List[PlayerFirstName]] = Field(None, min_length=1)
    hometown: Optional[List[PlayerHometown]] = Field(None, min_length=1)
    id: Optional[List[PlayerID]] = Field(None, min_length=1)
    last_name: Optional[List[PlayerLastName]] = Field(None, min_length=1)
    name: Optional[List[PlayerName]] = Field(None, min_length=1)
    nationality: Optional[List[PlayerNationality]] = Field(None, min_length=1)
    role: Optional[List[PlayerRoleSlug]] = Field(None, min_length=1)
    slug: Optional[List[PlayerSlug]] = Field(None, min_length=1)
    team_id: Optional[List[TeamID]] = Field(None, min_length=1)
    videogame_id: Optional[List[VideogameID]] = Field(None, min_length=1)


class FilterOverShortVideogameVersions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current: Optional[VideogameVersionIsCurrent] = None
    name: Optional[List[VideogameVersion]] = Field(None, min_length=1)


class FilterOverTeams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    acronym: Optional[List[TeamAcronym]] = Field(None, min_length=1)
    id: Optional[List[TeamID]] = Field(None, min_length=1)
    location: Optional[List[TeamLocation]] = Field(None, min_length=1)
    modified_at: Optional[List[TeamModifiedAt]] = Field(None, min_length=1)
    name: Optional[List[TeamName]] = Field(None, min_length=1)
    slug: Optional[List[TeamSlug]] = Field(None, min_length=1)
    videogame_id: Optional[List[VideogameID]] = Field(None, min_length=1)


class RangeOverLeagues(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[List[LeagueID]] = Field(None, max_length=2, min_length=2)
    modified_at: Optional[List[LeagueModifiedAt]] = Field(
        None, max_length=2, min_length=2
    )
    name: Optional[List[LeagueName]] = Field(None, max_length=2, min_length=2)
    slug: Optional[List[LeagueSlug]] = Field(None, max_length=2, min_length=2)
    url: Optional[List[LeagueURL]] = Field(None, max_length=2, min_length=2)


class RangeOverPlayers(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    birth_year: Optional[List[PlayerBirthYear]] = Field(
        None, max_length=2, min_length=2
    )
    birthday: Optional[List[PlayerBirthday]] = Field(None, max_length=2, min_length=2)
    first_name: Optional[List[PlayerFirstName]] = Field(
        None, max_length=2, min_length=2
    )
    hometown: Optional[List[PlayerHometown]] = Field(None, max_length=2, min_length=2)
    id: Optional[List[PlayerID]] = Field(None, max_length=2, min_length=2)
    last_name: Optional[List[PlayerLastName]] = Field(None, max_length=2, min_length=2)
    name: Optional[List[PlayerName]] = Field(None, max_length=2, min_length=2)
    nationality: Optional[List[PlayerNationality]] = Field(
        None, max_length=2, min_length=2
    )
    role: Optional[List[PlayerRoleSlug]] = Field(None, max_length=2, min_length=2)
    slug: Optional[List[PlayerSlug]] = Field(None, max_length=2, min_length=2)


class RangeOverShortVideogameVersions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current: Optional[List[VideogameVersionIsCurrent]] = Field(
        None, max_length=2, min_length=2
    )
    name: Optional[List[VideogameVersion]] = Field(None, max_length=2, min_length=2)


class RangeOverTeams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    acronym: Optional[List[TeamAcronym]] = Field(None, max_length=2, min_length=2)
    id: Optional[List[TeamID]] = Field(None, max_length=2, min_length=2)
    location: Optional[List[TeamLocation]] = Field(None, max_length=2, min_length=2)
    modified_at: Optional[List[TeamModifiedAt]] = Field(
        None, max_length=2, min_length=2
    )
    name: Optional[List[TeamName]] = Field(None, max_length=2, min_length=2)
    slug: Optional[List[TeamSlug]] = Field(None, max_length=2, min_length=2)


class SearchOverBrackets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    live_embed_url: Optional[MatchEmbedLiveVideoURLDeprecated] = None
    match_type: Optional[MatchType] = None
    name: Optional[MatchName] = None
    official_stream_url: Optional[MatchOfficialStreamURL] = None
    slug: Optional[MatchSlug] = None
    status: Optional[MatchStatus] = None


class SearchOverLeagues(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[LeagueName] = None
    slug: Optional[LeagueSlug] = None
    url: Optional[LeagueURL] = None


class SearchOverMatches(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    match_type: Optional[MatchType] = None
    name: Optional[MatchName] = None
    slug: Optional[MatchSlug] = None
    status: Optional[MatchStatus] = None


class SearchOverPlayers(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    birthday: Optional[PlayerBirthday] = None
    first_name: Optional[PlayerFirstName] = None
    hometown: Optional[PlayerHometown] = None
    last_name: Optional[PlayerLastName] = None
    name: Optional[PlayerName] = None
    nationality: Optional[PlayerNationality] = None
    role: Optional[PlayerRoleSlug] = None
    slug: Optional[PlayerSlug] = None


class SearchOverSeries(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[SerieDescription] = None
    name: Optional[SerieName] = None
    season: Optional[SerieSeason] = None
    slug: Optional[SerieSlug] = None
    tier: Optional[SerieTier] = None
    winner_type: Optional[OpponentType] = None


class SearchOverShortTournaments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[TournamentName] = None
    prizepool: Optional[TournamentPrizepool] = None
    slug: Optional[TournamentSlug] = None
    winner_type: Optional[OpponentType] = None


class SearchOverShortVideogameVersions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[VideogameVersion] = None


class SearchOverTeams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    acronym: Optional[TeamAcronym] = None
    location: Optional[TeamLocation] = None
    name: Optional[TeamName] = None
    slug: Optional[TeamSlug] = None


class SortOverBracket(Enum):
    begin_at = 'begin_at'
    field_begin_at = '-begin_at'
    detailed_stats = 'detailed_stats'
    field_detailed_stats = '-detailed_stats'
    draw = 'draw'
    field_draw = '-draw'
    end_at = 'end_at'
    field_end_at = '-end_at'
    forfeit = 'forfeit'
    field_forfeit = '-forfeit'
    game_advantage = 'game_advantage'
    field_game_advantage = '-game_advantage'
    id = 'id'
    field_id = '-id'
    live_embed_url = 'live_embed_url'
    field_live_embed_url = '-live_embed_url'
    match_type = 'match_type'
    field_match_type = '-match_type'
    modified_at = 'modified_at'
    field_modified_at = '-modified_at'
    name = 'name'
    field_name = '-name'
    number_of_games = 'number_of_games'
    field_number_of_games = '-number_of_games'
    official_stream_url = 'official_stream_url'
    field_official_stream_url = '-official_stream_url'
    original_scheduled_at = 'original_scheduled_at'
    field_original_scheduled_at = '-original_scheduled_at'
    scheduled_at = 'scheduled_at'
    field_scheduled_at = '-scheduled_at'
    slug = 'slug'
    field_slug = '-slug'
    status = 'status'
    field_status = '-status'
    tournament_id = 'tournament_id'
    field_tournament_id = '-tournament_id'
    winner_id = 'winner_id'
    field_winner_id = '-winner_id'


class SortOverBrackets(RootModel[List[SortOverBracket]]):
    root: List[SortOverBracket] = Field(..., min_length=1)


class SortOverLeague(Enum):
    id = 'id'
    field_id = '-id'
    modified_at = 'modified_at'
    field_modified_at = '-modified_at'
    name = 'name'
    field_name = '-name'
    slug = 'slug'
    field_slug = '-slug'
    url = 'url'
    field_url = '-url'


class SortOverLeagues(RootModel[List[SortOverLeague]]):
    root: List[SortOverLeague] = Field(..., min_length=1)


class SortOverMatch(Enum):
    begin_at = 'begin_at'
    field_begin_at = '-begin_at'
    detailed_stats = 'detailed_stats'
    field_detailed_stats = '-detailed_stats'
    draw = 'draw'
    field_draw = '-draw'
    end_at = 'end_at'
    field_end_at = '-end_at'
    forfeit = 'forfeit'
    field_forfeit = '-forfeit'
    id = 'id'
    field_id = '-id'
    match_type = 'match_type'
    field_match_type = '-match_type'
    modified_at = 'modified_at'
    field_modified_at = '-modified_at'
    name = 'name'
    field_name = '-name'
    number_of_games = 'number_of_games'
    field_number_of_games = '-number_of_games'
    scheduled_at = 'scheduled_at'
    field_scheduled_at = '-scheduled_at'
    slug = 'slug'
    field_slug = '-slug'
    status = 'status'
    field_status = '-status'
    tournament_id = 'tournament_id'
    field_tournament_id = '-tournament_id'
    winner_id = 'winner_id'
    field_winner_id = '-winner_id'


class SortOverMatches(RootModel[List[SortOverMatch]]):
    root: List[SortOverMatch] = Field(..., min_length=1)


class SortOverPlayer(Enum):
    birth_year = 'birth_year'
    field_birth_year = '-birth_year'
    birthday = 'birthday'
    field_birthday = '-birthday'
    first_name = 'first_name'
    field_first_name = '-first_name'
    hometown = 'hometown'
    field_hometown = '-hometown'
    id = 'id'
    field_id = '-id'
    last_name = 'last_name'
    field_last_name = '-last_name'
    name = 'name'
    field_name = '-name'
    nationality = 'nationality'
    field_nationality = '-nationality'
    role = 'role'
    field_role = '-role'
    slug = 'slug'
    field_slug = '-slug'
    videogame_id = 'videogame_id'
    field_videogame_id = '-videogame_id'
    team_id = 'team_id'
    field_team_id = '-team_id'


class SortOverPlayers(RootModel[List[SortOverPlayer]]):
    root: List[SortOverPlayer] = Field(..., min_length=1)


class SortOverSery(Enum):
    begin_at = 'begin_at'
    field_begin_at = '-begin_at'
    description = 'description'
    field_description = '-description'
    end_at = 'end_at'
    field_end_at = '-end_at'
    id = 'id'
    field_id = '-id'
    league_id = 'league_id'
    field_league_id = '-league_id'
    modified_at = 'modified_at'
    field_modified_at = '-modified_at'
    name = 'name'
    field_name = '-name'
    season = 'season'
    field_season = '-season'
    slug = 'slug'
    field_slug = '-slug'
    tier = 'tier'
    field_tier = '-tier'
    winner_id = 'winner_id'
    field_winner_id = '-winner_id'
    winner_type = 'winner_type'
    field_winner_type = '-winner_type'
    year = 'year'
    field_year = '-year'


class SortOverSeries(RootModel[List[SortOverSery]]):
    root: List[SortOverSery] = Field(..., min_length=1)


class SortOverShortTournament(Enum):
    begin_at = 'begin_at'
    field_begin_at = '-begin_at'
    end_at = 'end_at'
    field_end_at = '-end_at'
    id = 'id'
    field_id = '-id'
    modified_at = 'modified_at'
    field_modified_at = '-modified_at'
    name = 'name'
    field_name = '-name'
    prizepool = 'prizepool'
    field_prizepool = '-prizepool'
    serie_id = 'serie_id'
    field_serie_id = '-serie_id'
    slug = 'slug'
    field_slug = '-slug'
    winner_id = 'winner_id'
    field_winner_id = '-winner_id'
    winner_type = 'winner_type'
    field_winner_type = '-winner_type'


class SortOverShortTournaments(RootModel[List[SortOverShortTournament]]):
    root: List[SortOverShortTournament] = Field(..., min_length=1)


class SortOverShortVideogameVersion(Enum):
    current = 'current'
    field_current = '-current'
    name = 'name'
    field_name = '-name'


class SortOverShortVideogameVersions(RootModel[List[SortOverShortVideogameVersion]]):
    root: List[SortOverShortVideogameVersion] = Field(..., min_length=1)


class SortOverTeam(Enum):
    acronym = 'acronym'
    field_acronym = '-acronym'
    id = 'id'
    field_id = '-id'
    location = 'location'
    field_location = '-location'
    modified_at = 'modified_at'
    field_modified_at = '-modified_at'
    name = 'name'
    field_name = '-name'
    slug = 'slug'
    field_slug = '-slug'
    videogame_id = 'videogame_id'
    field_videogame_id = '-videogame_id'


class SortOverTeams(RootModel[List[SortOverTeam]]):
    root: List[SortOverTeam] = Field(..., min_length=1)


class TypeOverAdditionIncident(Enum):
    league = 'league'
    match = 'match'
    player = 'player'
    serie = 'serie'
    team = 'team'
    tournament = 'tournament'


class TypeOverAdditionIncidents(RootModel[List[TypeOverAdditionIncident]]):
    root: List[TypeOverAdditionIncident] = Field(..., min_length=1)


class TypeOverChangeIncident(Enum):
    league = 'league'
    match = 'match'
    player = 'player'
    serie = 'serie'
    team = 'team'
    tournament = 'tournament'


class TypeOverChangeIncidents(RootModel[List[TypeOverChangeIncident]]):
    root: List[TypeOverChangeIncident] = Field(..., min_length=1)


class TypeOverDeletionIncident(Enum):
    league = 'league'
    match = 'match'
    player = 'player'
    serie = 'serie'
    team = 'team'
    tournament = 'tournament'


class TypeOverDeletionIncidents(RootModel[List[TypeOverDeletionIncident]]):
    root: List[TypeOverDeletionIncident] = Field(..., min_length=1)


class TypeOverIncident(Enum):
    league = 'league'
    match = 'match'
    player = 'player'
    serie = 'serie'
    team = 'team'
    tournament = 'tournament'


class TypeOverIncidents(RootModel[List[TypeOverIncident]]):
    root: List[TypeOverIncident] = Field(..., min_length=1)


class Page(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class AdditionsGetResponse(BaseModel):
    error: Optional[str] = None


class Page1(RootModel[Union[conint(ge=1), Page]]):
    root: Union[conint(ge=1), Page]


class Page3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class ChangesGetResponse(BaseModel):
    error: Optional[str] = None


class Page4(RootModel[Union[conint(ge=1), Page3]]):
    root: Union[conint(ge=1), Page3]


class Page6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class DeletionsGetResponse(BaseModel):
    error: Optional[str] = None


class Page7(RootModel[Union[conint(ge=1), Page6]]):
    root: Union[conint(ge=1), Page6]


class Page9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class IncidentsGetResponse(BaseModel):
    error: Optional[str] = None


class Page10(RootModel[Union[conint(ge=1), Page9]]):
    root: Union[conint(ge=1), Page9]


class Page12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class LeaguesGetResponse(BaseModel):
    error: Optional[str] = None


class Page13(RootModel[Union[conint(ge=1), Page12]]):
    root: Union[conint(ge=1), Page12]


class LeaguesLeagueIdOrSlugGetResponse(BaseModel):
    error: Optional[str] = None


class Page15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class LeaguesLeagueIdOrSlugMatchesGetResponse(BaseModel):
    error: Optional[str] = None


class Page16(RootModel[Union[conint(ge=1), Page15]]):
    root: Union[conint(ge=1), Page15]


class Page18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class LeaguesLeagueIdOrSlugMatchesPastGetResponse(BaseModel):
    error: Optional[str] = None


class Page19(RootModel[Union[conint(ge=1), Page18]]):
    root: Union[conint(ge=1), Page18]


class Page21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class LeaguesLeagueIdOrSlugMatchesRunningGetResponse(BaseModel):
    error: Optional[str] = None


class Page22(RootModel[Union[conint(ge=1), Page21]]):
    root: Union[conint(ge=1), Page21]


class Page24(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class LeaguesLeagueIdOrSlugMatchesUpcomingGetResponse(BaseModel):
    error: Optional[str] = None


class Page25(RootModel[Union[conint(ge=1), Page24]]):
    root: Union[conint(ge=1), Page24]


class Page27(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class LeaguesLeagueIdOrSlugSeriesGetResponse(BaseModel):
    error: Optional[str] = None


class Page28(RootModel[Union[conint(ge=1), Page27]]):
    root: Union[conint(ge=1), Page27]


class Page30(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class LeaguesLeagueIdOrSlugTournamentsGetResponse(BaseModel):
    error: Optional[str] = None


class Page31(RootModel[Union[conint(ge=1), Page30]]):
    root: Union[conint(ge=1), Page30]


class Page33(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class LivesGetResponse(BaseModel):
    error: Optional[str] = None


class Page34(RootModel[Union[conint(ge=1), Page33]]):
    root: Union[conint(ge=1), Page33]


class Page36(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class MatchesGetResponse(BaseModel):
    error: Optional[str] = None


class Page37(RootModel[Union[conint(ge=1), Page36]]):
    root: Union[conint(ge=1), Page36]


class Page39(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class MatchesPastGetResponse(BaseModel):
    error: Optional[str] = None


class Page40(RootModel[Union[conint(ge=1), Page39]]):
    root: Union[conint(ge=1), Page39]


class Page42(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class MatchesRunningGetResponse(BaseModel):
    error: Optional[str] = None


class Page43(RootModel[Union[conint(ge=1), Page42]]):
    root: Union[conint(ge=1), Page42]


class Page45(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class MatchesUpcomingGetResponse(BaseModel):
    error: Optional[str] = None


class Page46(RootModel[Union[conint(ge=1), Page45]]):
    root: Union[conint(ge=1), Page45]


class MatchesMatchIdOrSlugGetResponse(BaseModel):
    error: Optional[str] = None


class MatchesMatchIdOrSlugOpponentsGetResponse(BaseModel):
    error: Optional[str] = None


class Page48(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class PlayersGetResponse(BaseModel):
    error: Optional[str] = None


class Page49(RootModel[Union[conint(ge=1), Page48]]):
    root: Union[conint(ge=1), Page48]


class PlayersPlayerIdOrSlugGetResponse(BaseModel):
    error: Optional[str] = None


class Page51(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class PlayersPlayerIdOrSlugMatchesGetResponse(BaseModel):
    error: Optional[str] = None


class Page52(RootModel[Union[conint(ge=1), Page51]]):
    root: Union[conint(ge=1), Page51]


class Page54(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SeriesGetResponse(BaseModel):
    error: Optional[str] = None


class Page55(RootModel[Union[conint(ge=1), Page54]]):
    root: Union[conint(ge=1), Page54]


class Page57(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SeriesPastGetResponse(BaseModel):
    error: Optional[str] = None


class Page58(RootModel[Union[conint(ge=1), Page57]]):
    root: Union[conint(ge=1), Page57]


class Page60(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SeriesRunningGetResponse(BaseModel):
    error: Optional[str] = None


class Page61(RootModel[Union[conint(ge=1), Page60]]):
    root: Union[conint(ge=1), Page60]


class Page63(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SeriesUpcomingGetResponse(BaseModel):
    error: Optional[str] = None


class Page64(RootModel[Union[conint(ge=1), Page63]]):
    root: Union[conint(ge=1), Page63]


class SeriesSerieIdOrSlugGetResponse(BaseModel):
    error: Optional[str] = None


class Page66(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SeriesSerieIdOrSlugMatchesGetResponse(BaseModel):
    error: Optional[str] = None


class Page67(RootModel[Union[conint(ge=1), Page66]]):
    root: Union[conint(ge=1), Page66]


class Page69(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SeriesSerieIdOrSlugMatchesPastGetResponse(BaseModel):
    error: Optional[str] = None


class Page70(RootModel[Union[conint(ge=1), Page69]]):
    root: Union[conint(ge=1), Page69]


class Page72(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SeriesSerieIdOrSlugMatchesRunningGetResponse(BaseModel):
    error: Optional[str] = None


class Page73(RootModel[Union[conint(ge=1), Page72]]):
    root: Union[conint(ge=1), Page72]


class Page75(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SeriesSerieIdOrSlugMatchesUpcomingGetResponse(BaseModel):
    error: Optional[str] = None


class Page76(RootModel[Union[conint(ge=1), Page75]]):
    root: Union[conint(ge=1), Page75]


class Page78(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SeriesSerieIdOrSlugPlayersGetResponse(BaseModel):
    error: Optional[str] = None


class Page79(RootModel[Union[conint(ge=1), Page78]]):
    root: Union[conint(ge=1), Page78]


class Page81(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SeriesSerieIdOrSlugTournamentsGetResponse(BaseModel):
    error: Optional[str] = None


class Page82(RootModel[Union[conint(ge=1), Page81]]):
    root: Union[conint(ge=1), Page81]


class Page84(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TeamsGetResponse(BaseModel):
    error: Optional[str] = None


class Page85(RootModel[Union[conint(ge=1), Page84]]):
    root: Union[conint(ge=1), Page84]


class TeamsTeamIdOrSlugGetResponse(BaseModel):
    error: Optional[str] = None


class Page87(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TeamsTeamIdOrSlugLeaguesGetResponse(BaseModel):
    error: Optional[str] = None


class Page88(RootModel[Union[conint(ge=1), Page87]]):
    root: Union[conint(ge=1), Page87]


class Page90(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TeamsTeamIdOrSlugMatchesGetResponse(BaseModel):
    error: Optional[str] = None


class Page91(RootModel[Union[conint(ge=1), Page90]]):
    root: Union[conint(ge=1), Page90]


class Page93(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TeamsTeamIdOrSlugSeriesGetResponse(BaseModel):
    error: Optional[str] = None


class Page94(RootModel[Union[conint(ge=1), Page93]]):
    root: Union[conint(ge=1), Page93]


class Page96(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TeamsTeamIdOrSlugTournamentsGetResponse(BaseModel):
    error: Optional[str] = None


class Page97(RootModel[Union[conint(ge=1), Page96]]):
    root: Union[conint(ge=1), Page96]


class Page99(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TournamentsGetResponse(BaseModel):
    error: Optional[str] = None


class Page100(RootModel[Union[conint(ge=1), Page99]]):
    root: Union[conint(ge=1), Page99]


class Page102(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TournamentsPastGetResponse(BaseModel):
    error: Optional[str] = None


class Page103(RootModel[Union[conint(ge=1), Page102]]):
    root: Union[conint(ge=1), Page102]


class Page105(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TournamentsRunningGetResponse(BaseModel):
    error: Optional[str] = None


class Page106(RootModel[Union[conint(ge=1), Page105]]):
    root: Union[conint(ge=1), Page105]


class Page108(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TournamentsUpcomingGetResponse(BaseModel):
    error: Optional[str] = None


class Page109(RootModel[Union[conint(ge=1), Page108]]):
    root: Union[conint(ge=1), Page108]


class TournamentsTournamentIdOrSlugGetResponse(BaseModel):
    error: Optional[str] = None


class Page111(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TournamentsTournamentIdOrSlugBracketsGetResponse(BaseModel):
    error: Optional[str] = None


class Page112(RootModel[Union[conint(ge=1), Page111]]):
    root: Union[conint(ge=1), Page111]


class Page114(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TournamentsTournamentIdOrSlugMatchesGetResponse(BaseModel):
    error: Optional[str] = None


class Page115(RootModel[Union[conint(ge=1), Page114]]):
    root: Union[conint(ge=1), Page114]


class Page117(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TournamentsTournamentIdOrSlugPlayersGetResponse(BaseModel):
    error: Optional[str] = None


class Page118(RootModel[Union[conint(ge=1), Page117]]):
    root: Union[conint(ge=1), Page117]


class TournamentsTournamentIdOrSlugRostersGetResponse(BaseModel):
    error: Optional[str] = None


class Page120(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TournamentsTournamentIdOrSlugStandingsGetResponse(BaseModel):
    error: Optional[str] = None


class Page121(RootModel[Union[conint(ge=1), Page120]]):
    root: Union[conint(ge=1), Page120]


class Page123(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class TournamentsTournamentIdOrSlugTeamsGetResponse(BaseModel):
    error: Optional[str] = None


class Page124(RootModel[Union[conint(ge=1), Page123]]):
    root: Union[conint(ge=1), Page123]


class Page126(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class VideogamesGetResponse(BaseModel):
    error: Optional[str] = None


class Page127(RootModel[Union[conint(ge=1), Page126]]):
    root: Union[conint(ge=1), Page126]


class VideogamesVideogameIdOrSlugGetResponse(BaseModel):
    error: Optional[str] = None


class Page129(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class VideogamesVideogameIdOrSlugLeaguesGetResponse(BaseModel):
    error: Optional[str] = None


class Page130(RootModel[Union[conint(ge=1), Page129]]):
    root: Union[conint(ge=1), Page129]


class Page132(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class VideogamesVideogameIdOrSlugSeriesGetResponse(BaseModel):
    error: Optional[str] = None


class Page133(RootModel[Union[conint(ge=1), Page132]]):
    root: Union[conint(ge=1), Page132]


class Page135(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class VideogamesVideogameIdOrSlugTournamentsGetResponse(BaseModel):
    error: Optional[str] = None


class Page136(RootModel[Union[conint(ge=1), Page135]]):
    root: Union[conint(ge=1), Page135]


class Page138(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    number: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class VideogamesVideogameIdOrSlugVersionsGetResponse(BaseModel):
    error: Optional[str] = None


class Page139(RootModel[Union[conint(ge=1), Page138]]):
    root: Union[conint(ge=1), Page138]


class BaseLeague(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: LeagueID
    image_url: LeagueImageURL = Field(..., title='LeagueImageURL')
    modified_at: LeagueModifiedAt
    name: LeagueName
    slug: LeagueSlug
    url: LeagueURL = Field(..., title='LeagueURL')


class BasePlayer(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    birth_year: PlayerBirthYear = Field(..., title='PlayerBirthYear')
    birthday: PlayerBirthday = Field(..., title='PlayerBirthday')
    first_name: PlayerFirstName = Field(..., title='PlayerFirstName')
    hometown: PlayerHometown = Field(..., title='PlayerHometown')
    id: PlayerID
    image_url: PlayerImageURL = Field(..., title='PlayerImageURL')
    last_name: PlayerLastName = Field(..., title='PlayerLastName')
    name: PlayerName
    nationality: PlayerNationality = Field(..., title='PlayerNationality')
    role: PlayerRoleSlug = Field(..., title='PlayerRoleSlug')
    slug: PlayerSlug = Field(..., title='PlayerSlug')


class BasePlayers(RootModel[List[BasePlayer]]):
    root: List[BasePlayer]


class BaseTeam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    acronym: TeamAcronym = Field(..., title='TeamAcronym')
    id: TeamID
    image_url: TeamImageURL = Field(..., title='TeamImageURL')
    location: TeamLocation = Field(..., title='TeamLocation')
    modified_at: TeamModifiedAt
    name: TeamName
    slug: TeamSlug = Field(..., title='TeamSlug')


class BaseTeams(RootModel[List[BaseTeam]]):
    root: List[BaseTeam]


class BettingCSGOGameRoundTeam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    outcome: CSGOOutcome
    round: CSGORoundID
    team_id: TeamID
    terrorist: CSGOIsTerrorist
    winner: CSGOIsRoundWinner


class BettingCSGOGameRoundTeams(RootModel[List[BettingCSGOGameRoundTeam]]):
    root: List[BettingCSGOGameRoundTeam]


class BettingGameRoundTeams(RootModel[BettingCSGOGameRoundTeams]):
    root: BettingCSGOGameRoundTeams


class BettingGroup(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: BlueprintID
    name: BlueprintName


class BettingLoLGameTeam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    baron_kills: LoLBaronKills = Field(..., title='LoLBaronKills')
    color: LoLTeamColor
    dragon_kills: LoLDragonKills = Field(..., title='LoLDragonKills')
    first_baron: LoLTeamGotFirstBaron = Field(..., title='LoLTeamGotFirstBaron')
    first_blood: LoLTeamGotFirstBlood = Field(..., title='LoLTeamGotFirstBlood')
    first_dragon: LoLTeamGotFirstDragon = Field(..., title='LoLTeamGotFirstDragon')
    first_herald: LoLTeamGotFirstHerald = Field(..., title='LoLTeamGotFirstHerald')
    first_inhibitor: LoLTeamGotFirstInhibitor = Field(
        ..., title='LoLTeamGotFirstInhibitor'
    )
    first_tower: LoLTeamGotFirstTower = Field(..., title='LoLTeamGotFirstTower')
    gold_earned: LoLGold = Field(..., title='LoLGold')
    herald_kill: LoLHeraldKills = Field(..., title='LoLHeraldKills')
    inhibitor_kills: LoLInhibitorKills = Field(..., title='LoLInhibitorKills')
    team_id: TeamID
    team_kills: LoLTeamKills = Field(..., title='LoLTeamKills')
    tower_kills: LoLTowerKills = Field(..., title='LoLTowerKills')


class BettingLoLGameTeams(RootModel[List[BettingLoLGameTeam]]):
    root: List[BettingLoLGameTeam]


class Blueprint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: BlueprintID
    name: BlueprintName


class CSGOMap(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: CSGOMapID
    image_url: CSGOMapImageURL = Field(..., title='CSGOMapImageURL')
    name: CSGOMapName


class CSGOWeaponIDOrSlug(RootModel[Union[CSGOWeaponID, CSGOWeaponSlug]]):
    root: Union[CSGOWeaponID, CSGOWeaponSlug] = Field(
        ..., description='For Counter Strike: Global Offensive: a weapon ID or slug'
    )


class Dota2AbilityIDOrSlug(RootModel[Union[Dota2AbilityID, Dota2AbilitySlug]]):
    root: Union[Dota2AbilityID, Dota2AbilitySlug] = Field(
        ..., description='For Dota 2: an ability ID or slug'
    )


class Dota2HeroIDOrSlug(RootModel[Union[Dota2HeroID, Dota2HeroSlug]]):
    root: Union[Dota2HeroID, Dota2HeroSlug] = Field(
        ..., description='For Dota 2: a hero ID or slug'
    )


class Dota2ItemIDOrSlug(RootModel[Union[Dota2ItemID, Dota2ItemSlug]]):
    root: Union[Dota2ItemID, Dota2ItemSlug] = Field(
        ..., description='For Dota 2: an item ID or slug'
    )


class GameID(
    RootModel[Union[LoLGameID, CSGOGameID, OwGameID, Dota2GameID, PUBGGameID]]
):
    root: Union[LoLGameID, CSGOGameID, OwGameID, Dota2GameID, PUBGGameID] = Field(
        ..., description='A game ID'
    )


class GroupStanding(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    losses: StandingLosses
    rank: StandingRank
    team: BaseTeam
    ties: Optional[StandingTies] = None
    total: MatchCount
    wins: MatchCount


class IncidentDeletionReason(
    RootModel[
        Union[
            IncidentDeletionReasonReplaced,
            IncidentDeletionReasonMerged,
            IncidentDeletionReasonDeleted,
        ]
    ]
):
    root: Union[
        IncidentDeletionReasonReplaced,
        IncidentDeletionReasonMerged,
        IncidentDeletionReasonDeleted,
    ]


class IncidentID(
    RootModel[Union[LeagueID, MatchID, PlayerID, SerieID, TeamID, TournamentID]]
):
    root: Union[LeagueID, MatchID, PlayerID, SerieID, TeamID, TournamentID] = Field(
        ..., description='An incident ID'
    )


class LeagueIDOrSlug(RootModel[Union[LeagueID, LeagueSlug]]):
    root: Union[LeagueID, LeagueSlug] = Field(..., description='A league ID or slug')


class LeagueVideogameCSGO(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id11
    name: Name11
    slug: Slug11


class LeagueVideogameCodmw(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id12
    name: Name12
    slug: Slug12


class LeagueVideogameDota2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id13
    name: Name13
    slug: Slug13


class LeagueVideogameFifa(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id14
    name: Name14
    slug: Slug14


class LeagueVideogameFortnite(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id15
    name: Name15
    slug: Slug15


class LeagueVideogameLoL(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id16
    name: Name16
    slug: Slug16


class LeagueVideogameOverwatch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id17
    name: Name17
    slug: Slug17


class LeagueVideogamePUBG(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id18
    name: Name18
    slug: Slug18


class LeagueVideogameR6siege(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id19
    name: Name19
    slug: Slug19


class LeagueVideogameRocketLeague(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id20
    name: Name20
    slug: Slug20


class LeagueVideogameValorant(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id21
    name: Name21
    slug: Slug21


class LiveEndpoint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: LiveBeginAt = Field(..., title='LiveBeginAt')
    expected_begin_at: LiveExpectedBeginAt = Field(..., title='LiveExpectedBeginAt')
    last_active: LiveLastActive = Field(..., title='LiveLastActive')
    match_id: MatchID
    open: LiveIsOpen
    type: LiveType
    url: LiveUrl


class LiveEndpoints(RootModel[List[LiveEndpoint]]):
    root: List[LiveEndpoint]


class LiveEvent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: EventBeginAt = Field(..., title='EventBeginAt')
    end_at: EventEndAt = Field(..., title='EventEndAt')
    game: VideogameSlug
    id: EventID
    is_active: EventIsActive
    stream_url: EventStreamURL = Field(..., title='EventStreamURL')
    tournament_id: TournamentID


class MatchIDOrSlug(RootModel[Union[MatchID, MatchSlug]]):
    root: Union[MatchID, MatchSlug] = Field(..., description='A match ID or slug')


class MatchLive(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    opens_at: MatchLiveOpensAt = Field(..., title='MatchLiveOpensAt')
    supported: MatchLiveIsSupported
    url: MatchLiveURL = Field(..., title='MatchLiveURL')


class MatchOpponentBasePlayer(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    birth_year: PlayerBirthYear = Field(..., title='PlayerBirthYear')
    birthday: PlayerBirthday = Field(..., title='PlayerBirthday')
    current_videogame: CurrentVideogame
    first_name: PlayerFirstName = Field(..., title='PlayerFirstName')
    hometown: PlayerHometown = Field(..., title='PlayerHometown')
    id: PlayerID
    image_url: PlayerImageURL = Field(..., title='PlayerImageURL')
    last_name: PlayerLastName = Field(..., title='PlayerLastName')
    name: PlayerName
    nationality: PlayerNationality = Field(..., title='PlayerNationality')
    role: PlayerRoleSlug = Field(..., title='PlayerRoleSlug')
    slug: PlayerSlug = Field(..., title='PlayerSlug')


class MatchOpponentBasePlayers(RootModel[List[MatchOpponentBasePlayer]]):
    root: List[MatchOpponentBasePlayer] = Field(..., description='A list of players')


class MatchPlayerOpponentsObject(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    opponent_type: OpponentTypePlayer
    opponents: MatchOpponentBasePlayers


class MatchPlayerResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    player_id: PlayerID
    score: MatchScore


class MatchTeamResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    score: MatchScore
    team_id: TeamID


class OpponentID(RootModel[Union[PlayerID, TeamID]]):
    root: Union[PlayerID, TeamID]


class OwHeroIDOrSlug(RootModel[Union[OwHeroID, OwHeroSlug]]):
    root: Union[OwHeroID, OwHeroSlug] = Field(
        ..., description='For Overwatch: a hero ID or slug'
    )


class OwMapIDOrSlug(RootModel[Union[OwMapID, OwMapSlug]]):
    root: Union[OwMapID, OwMapSlug] = Field(
        ..., description='For Overwatch: a map ID or slug'
    )


class Player(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    birth_year: Optional[PlayerBirthYear] = Field(None, title='PlayerBirthYear')
    birthday: Optional[PlayerBirthday] = Field(None, title='PlayerBirthday')
    current_team: BaseTeam = Field(..., title='BaseTeam')
    current_videogame: CurrentVideogame = Field(..., title='CurrentVideogame')
    first_name: PlayerFirstName = Field(..., title='PlayerFirstName')
    hometown: PlayerHometown = Field(..., title='PlayerHometown')
    id: PlayerID
    image_url: PlayerImageURL = Field(..., title='PlayerImageURL')
    last_name: PlayerLastName = Field(..., title='PlayerLastName')
    name: PlayerName
    nationality: PlayerNationality = Field(..., title='PlayerNationality')
    role: PlayerRoleSlug = Field(..., title='PlayerRoleSlug')
    slug: PlayerSlug = Field(..., title='PlayerSlug')


class PlayerIDOrSlug(RootModel[Union[PlayerID, PlayerSlug]]):
    root: Union[PlayerID, PlayerSlug] = Field(..., description='A player ID or slug')


class Players(RootModel[List[Player]]):
    root: List[Player]


class PreviousMatch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    match_id: MatchID
    type: PreviousMatchType


class PreviousMatches(RootModel[List[PreviousMatch]]):
    root: List[PreviousMatch]


class SerieIDOrSlug(RootModel[Union[SerieID, SerieSlug]]):
    root: Union[SerieID, SerieSlug] = Field(..., description='A serie ID or slug')


class ShortVideogameVersion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current: VideogameVersionIsCurrent
    name: VideogameVersion


class ShortVideogameVersions(RootModel[List[ShortVideogameVersion]]):
    root: List[ShortVideogameVersion]


class Stream(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    embed_url: StreamEmbedURL = Field(..., title='StreamEmbedURL')
    language: StreamLanguage
    main: StreamIsMain
    official: StreamIsOfficial
    raw_url: StreamURL


class StreamsList(RootModel[List[Stream]]):
    root: List[Stream]


class Team(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    acronym: TeamAcronym = Field(..., title='TeamAcronym')
    current_videogame: CurrentVideogame = Field(..., title='CurrentVideogame')
    id: TeamID
    image_url: TeamImageURL = Field(..., title='TeamImageURL')
    location: TeamLocation = Field(..., title='TeamLocation')
    modified_at: TeamModifiedAt
    name: TeamName
    players: BasePlayers
    slug: TeamSlug = Field(..., title='TeamSlug')


class TeamIDOrSlug(RootModel[Union[TeamID, TeamSlug]]):
    root: Union[TeamID, TeamSlug] = Field(..., description='A team ID or slug')


class Teams(RootModel[List[Team]]):
    root: List[Team] = Field(..., description='A list of teams')


class TournamentIDOrSlug(RootModel[Union[TournamentID, TournamentSlug]]):
    root: Union[TournamentID, TournamentSlug] = Field(
        ..., description='A tournament ID or slug'
    )


class TournamentPlayerRosters(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    rosters: Players
    type: OpponentTypePlayer


class TournamentRosterItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    players: BasePlayers
    team: BaseTeam


class TournamentRosterItems(RootModel[List[TournamentRosterItem]]):
    root: List[TournamentRosterItem]


class TournamentTeamRosters(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    rosters: Teams
    type: OpponentTypeTeam


class VideogameIDOrSlug(RootModel[Union[VideogameID, VideogameSlug]]):
    root: Union[VideogameID, VideogameSlug] = Field(
        ..., description='A videogame ID or slug'
    )


class VideogameTitle(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: VideogameTitleID
    name: VideogameTitleName
    videogame_id: VideogameID


class FilterOverBrackets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: Optional[List[MatchBeginAt]] = Field(None, min_length=1)
    detailed_stats: Optional[MatchDetailedStats] = None
    draw: Optional[MatchIsDraw] = None
    end_at: Optional[List[MatchEndAt]] = Field(None, min_length=1)
    forfeit: Optional[MatchIsForfeit] = None
    game_advantage: Optional[List[OpponentID]] = Field(None, min_length=1)
    id: Optional[List[MatchID]] = Field(None, min_length=1)
    live_embed_url: Optional[List[MatchEmbedLiveVideoURLDeprecated]] = Field(
        None, min_length=1
    )
    match_type: Optional[List[MatchType]] = Field(None, min_length=1)
    modified_at: Optional[List[MatchModifiedAt]] = Field(None, min_length=1)
    name: Optional[List[MatchName]] = Field(None, min_length=1)
    number_of_games: Optional[List[GameCount]] = Field(None, min_length=1)
    official_stream_url: Optional[List[MatchOfficialStreamURL]] = Field(
        None, min_length=1
    )
    original_scheduled_at: Optional[List[MatchOriginalScheduledAt]] = Field(
        None, min_length=1
    )
    scheduled_at: Optional[List[MatchScheduledAt]] = Field(None, min_length=1)
    slug: Optional[List[MatchSlug]] = Field(None, min_length=1)
    status: Optional[List[MatchStatus]] = Field(None, min_length=1)
    tournament_id: Optional[List[TournamentID]] = Field(None, min_length=1)
    winner_id: Optional[List[OpponentID]] = Field(None, min_length=1)


class FilterOverMatches(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: Optional[List[MatchBeginAt]] = Field(None, min_length=1)
    detailed_stats: Optional[MatchDetailedStats] = None
    draw: Optional[MatchIsDraw] = None
    end_at: Optional[List[MatchEndAt]] = Field(None, min_length=1)
    finished: Optional[bool] = None
    forfeit: Optional[MatchIsForfeit] = None
    future: Optional[bool] = None
    id: Optional[List[MatchID]] = Field(None, min_length=1)
    league_id: Optional[List[LeagueID]] = Field(None, min_length=1)
    match_type: Optional[List[MatchType]] = Field(None, min_length=1)
    modified_at: Optional[List[MatchModifiedAt]] = Field(None, min_length=1)
    name: Optional[List[MatchName]] = Field(None, min_length=1)
    not_started: Optional[bool] = None
    number_of_games: Optional[List[GameCount]] = Field(None, min_length=1)
    opponent_id: Optional[List[TeamIDOrSlug]] = Field(None, min_length=1)
    past: Optional[bool] = None
    running: Optional[bool] = None
    scheduled_at: Optional[List[MatchScheduledAt]] = Field(None, min_length=1)
    serie_id: Optional[List[SerieID]] = Field(None, min_length=1)
    slug: Optional[List[MatchSlug]] = Field(None, min_length=1)
    status: Optional[List[MatchStatus]] = Field(None, min_length=1)
    tournament_id: Optional[List[TournamentID]] = Field(None, min_length=1)
    unscheduled: Optional[bool] = None
    videogame: Optional[List[VideogameIDOrSlug]] = Field(None, min_length=1)
    winner_id: Optional[List[OpponentID]] = Field(None, min_length=1)


class FilterOverSeries(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: Optional[List[SerieBeginAt]] = Field(None, min_length=1)
    description: Optional[List[SerieDescription]] = Field(None, min_length=1)
    end_at: Optional[List[SerieEndAt]] = Field(None, min_length=1)
    id: Optional[List[SerieID]] = Field(None, min_length=1)
    league_id: Optional[List[LeagueID]] = Field(None, min_length=1)
    modified_at: Optional[List[SerieModifiedAt]] = Field(None, min_length=1)
    name: Optional[List[SerieName]] = Field(None, min_length=1)
    season: Optional[List[SerieSeason]] = Field(None, min_length=1)
    slug: Optional[List[SerieSlug]] = Field(None, min_length=1)
    tier: Optional[List[SerieTier]] = Field(None, min_length=1)
    winner_id: Optional[List[OpponentID]] = Field(None, min_length=1)
    winner_type: Optional[List[OpponentType]] = Field(None, min_length=1)
    year: Optional[List[SerieYear]] = Field(None, min_length=1)


class FilterOverShortTournaments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: Optional[List[TournamentBeginAt]] = Field(None, min_length=1)
    end_at: Optional[List[TournamentEndAt]] = Field(None, min_length=1)
    id: Optional[List[TournamentID]] = Field(None, min_length=1)
    live_supported: Optional[TournamentLiveSupported] = None
    modified_at: Optional[List[TournamentModifiedAt]] = Field(None, min_length=1)
    name: Optional[List[TournamentName]] = Field(None, min_length=1)
    prizepool: Optional[List[TournamentPrizepool]] = Field(None, min_length=1)
    serie_id: Optional[List[SerieID]] = Field(None, min_length=1)
    slug: Optional[List[TournamentSlug]] = Field(None, min_length=1)
    winner_id: Optional[List[OpponentID]] = Field(None, min_length=1)
    winner_type: Optional[List[OpponentType]] = Field(None, min_length=1)


class RangeOverBrackets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: Optional[List[MatchBeginAt]] = Field(None, max_length=2, min_length=2)
    detailed_stats: Optional[List[MatchDetailedStats]] = Field(
        None, max_length=2, min_length=2
    )
    draw: Optional[List[MatchIsDraw]] = Field(None, max_length=2, min_length=2)
    end_at: Optional[List[MatchEndAt]] = Field(None, max_length=2, min_length=2)
    forfeit: Optional[List[MatchIsForfeit]] = Field(None, max_length=2, min_length=2)
    game_advantage: Optional[List[OpponentID]] = Field(None, max_length=2, min_length=2)
    id: Optional[List[MatchID]] = Field(None, max_length=2, min_length=2)
    live_embed_url: Optional[List[MatchEmbedLiveVideoURLDeprecated]] = Field(
        None, max_length=2, min_length=2
    )
    match_type: Optional[List[MatchType]] = Field(None, max_length=2, min_length=2)
    modified_at: Optional[List[MatchModifiedAt]] = Field(
        None, max_length=2, min_length=2
    )
    name: Optional[List[MatchName]] = Field(None, max_length=2, min_length=2)
    number_of_games: Optional[List[GameCount]] = Field(None, max_length=2, min_length=2)
    official_stream_url: Optional[List[MatchOfficialStreamURL]] = Field(
        None, max_length=2, min_length=2
    )
    original_scheduled_at: Optional[List[MatchOriginalScheduledAt]] = Field(
        None, max_length=2, min_length=2
    )
    scheduled_at: Optional[List[MatchScheduledAt]] = Field(
        None, max_length=2, min_length=2
    )
    slug: Optional[List[MatchSlug]] = Field(None, max_length=2, min_length=2)
    status: Optional[List[MatchStatus]] = Field(None, max_length=2, min_length=2)
    tournament_id: Optional[List[TournamentID]] = Field(
        None, max_length=2, min_length=2
    )
    winner_id: Optional[List[OpponentID]] = Field(None, max_length=2, min_length=2)


class RangeOverMatches(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: Optional[List[MatchBeginAt]] = Field(None, max_length=2, min_length=2)
    detailed_stats: Optional[List[MatchDetailedStats]] = Field(
        None, max_length=2, min_length=2
    )
    draw: Optional[List[MatchIsDraw]] = Field(None, max_length=2, min_length=2)
    end_at: Optional[List[MatchEndAt]] = Field(None, max_length=2, min_length=2)
    forfeit: Optional[List[MatchIsForfeit]] = Field(None, max_length=2, min_length=2)
    id: Optional[List[MatchID]] = Field(None, max_length=2, min_length=2)
    match_type: Optional[List[MatchType]] = Field(None, max_length=2, min_length=2)
    modified_at: Optional[List[MatchModifiedAt]] = Field(
        None, max_length=2, min_length=2
    )
    name: Optional[List[MatchName]] = Field(None, max_length=2, min_length=2)
    number_of_games: Optional[List[GameCount]] = Field(None, max_length=2, min_length=2)
    scheduled_at: Optional[List[MatchScheduledAt]] = Field(
        None, max_length=2, min_length=2
    )
    slug: Optional[List[MatchSlug]] = Field(None, max_length=2, min_length=2)
    status: Optional[List[MatchStatus]] = Field(None, max_length=2, min_length=2)
    tournament_id: Optional[List[TournamentID]] = Field(
        None, max_length=2, min_length=2
    )
    winner_id: Optional[List[OpponentID]] = Field(None, max_length=2, min_length=2)


class RangeOverSeries(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: Optional[List[SerieBeginAt]] = Field(None, max_length=2, min_length=2)
    description: Optional[List[SerieDescription]] = Field(
        None, max_length=2, min_length=2
    )
    end_at: Optional[List[SerieEndAt]] = Field(None, max_length=2, min_length=2)
    id: Optional[List[SerieID]] = Field(None, max_length=2, min_length=2)
    league_id: Optional[List[LeagueID]] = Field(None, max_length=2, min_length=2)
    modified_at: Optional[List[SerieModifiedAt]] = Field(
        None, max_length=2, min_length=2
    )
    name: Optional[List[SerieName]] = Field(None, max_length=2, min_length=2)
    season: Optional[List[SerieSeason]] = Field(None, max_length=2, min_length=2)
    slug: Optional[List[SerieSlug]] = Field(None, max_length=2, min_length=2)
    tier: Optional[List[SerieTier]] = Field(None, max_length=2, min_length=2)
    winner_id: Optional[List[OpponentID]] = Field(None, max_length=2, min_length=2)
    winner_type: Optional[List[OpponentType]] = Field(None, max_length=2, min_length=2)
    year: Optional[List[SerieYear]] = Field(None, max_length=2, min_length=2)


class RangeOverShortTournaments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: Optional[List[TournamentBeginAt]] = Field(
        None, max_length=2, min_length=2
    )
    end_at: Optional[List[TournamentEndAt]] = Field(None, max_length=2, min_length=2)
    id: Optional[List[TournamentID]] = Field(None, max_length=2, min_length=2)
    modified_at: Optional[List[TournamentModifiedAt]] = Field(
        None, max_length=2, min_length=2
    )
    name: Optional[List[TournamentName]] = Field(None, max_length=2, min_length=2)
    prizepool: Optional[List[TournamentPrizepool]] = Field(
        None, max_length=2, min_length=2
    )
    serie_id: Optional[List[SerieID]] = Field(None, max_length=2, min_length=2)
    slug: Optional[List[TournamentSlug]] = Field(None, max_length=2, min_length=2)
    winner_id: Optional[List[OpponentID]] = Field(None, max_length=2, min_length=2)
    winner_type: Optional[List[OpponentType]] = Field(None, max_length=2, min_length=2)


class VideogameOverAdditionIncidents(RootModel[List[VideogameIDOrSlug]]):
    root: List[VideogameIDOrSlug] = Field(..., min_length=1)


class VideogameOverChangeIncidents(RootModel[List[VideogameIDOrSlug]]):
    root: List[VideogameIDOrSlug] = Field(..., min_length=1)


class VideogameOverDeletionIncidents(RootModel[List[VideogameIDOrSlug]]):
    root: List[VideogameIDOrSlug] = Field(..., min_length=1)


class VideogameOverIncidents(RootModel[List[VideogameIDOrSlug]]):
    root: List[VideogameIDOrSlug] = Field(..., min_length=1)


class BaseMatch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: MatchBeginAt = Field(..., title='MatchBeginAt')
    detailed_stats: MatchDetailedStats
    draw: MatchIsDraw
    end_at: MatchEndAt = Field(..., title='MatchEndAt')
    forfeit: MatchIsForfeit
    game_advantage: OpponentID = Field(..., title='OpponentID')
    id: MatchID
    live: MatchLive
    live_embed_url: MatchEmbedLiveVideoURLDeprecated = Field(
        ..., title='MatchEmbedLiveVideoURLDeprecated'
    )
    match_type: MatchType
    modified_at: MatchModifiedAt
    name: MatchName
    number_of_games: GameCount
    official_stream_url: MatchOfficialStreamURL = Field(
        ..., title='MatchOfficialStreamURL'
    )
    original_scheduled_at: MatchOriginalScheduledAt = Field(
        ..., title='MatchOriginalScheduledAt'
    )
    rescheduled: MatchIsRescheduled = Field(..., title='MatchIsRescheduled')
    scheduled_at: MatchScheduledAt = Field(..., title='MatchScheduledAt')
    slug: MatchSlug = Field(..., title='MatchSlug')
    status: MatchStatus
    streams: MatchLocalizedStreams
    streams_list: StreamsList
    tournament_id: TournamentID
    winner_id: OpponentID = Field(..., title='OpponentID')


class BaseMatches(RootModel[List[BaseMatch]]):
    root: List[BaseMatch]


class BaseOpponent(RootModel[Union[BasePlayer, BaseTeam]]):
    root: Union[BasePlayer, BaseTeam]


class BaseSerie(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: SerieBeginAt = Field(..., title='SerieBeginAt')
    description: SerieDescription = Field(..., title='SerieDescription')
    end_at: SerieEndAt = Field(..., title='SerieEndAt')
    full_name: SerieFullName
    id: SerieID
    league_id: LeagueID
    modified_at: SerieModifiedAt
    name: SerieName = Field(..., title='SerieName')
    season: SerieSeason = Field(..., title='SerieSeason')
    slug: SerieSlug
    tier: SerieTier = Field(..., title='SerieTier')
    winner_id: OpponentID = Field(..., title='OpponentID')
    winner_type: OpponentType = Field(..., title='OpponentType')
    year: SerieYear


class BaseSeries(RootModel[List[BaseSerie]]):
    root: List[BaseSerie]


class BaseTournament(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: TournamentBeginAt = Field(..., title='TournamentBeginAt')
    end_at: TournamentEndAt = Field(..., title='TournamentEndAt')
    id: TournamentID
    league_id: LeagueID
    live_supported: TournamentLiveSupported
    modified_at: TournamentModifiedAt
    name: TournamentName
    prizepool: TournamentPrizepool = Field(..., title='TournamentPrizepool')
    serie_id: SerieID
    slug: TournamentSlug
    winner_id: OpponentID = Field(..., title='OpponentID')
    winner_type: OpponentType = Field(..., title='OpponentType')


class BaseTournaments(RootModel[List[BaseTournament]]):
    root: List[BaseTournament]


class BettingBaseTournament(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: TournamentBeginAt = Field(..., title='TournamentBeginAt')
    end_at: TournamentEndAt = Field(..., title='TournamentEndAt')
    id: TournamentID
    league_id: LeagueID
    live_supported: TournamentLiveSupported
    modified_at: TournamentModifiedAt
    name: TournamentName
    prizepool: TournamentPrizepool = Field(..., title='TournamentPrizepool')
    slug: TournamentSlug
    winner_id: OpponentID = Field(..., title='OpponentID')
    winner_type: OpponentType = Field(..., title='OpponentType')


class BettingGameTeams(RootModel[BettingLoLGameTeams]):
    root: BettingLoLGameTeams


class BettingLeagueVideogame(
    RootModel[
        Union[
            LeagueVideogameLoL,
            LeagueVideogameCSGO,
            LeagueVideogameDota2,
            LeagueVideogameOverwatch,
            LeagueVideogamePUBG,
            LeagueVideogameFortnite,
            LeagueVideogameRocketLeague,
            LeagueVideogameCodmw,
            LeagueVideogameR6siege,
            LeagueVideogameFifa,
            LeagueVideogameValorant,
        ]
    ]
):
    root: Union[
        LeagueVideogameLoL,
        LeagueVideogameCSGO,
        LeagueVideogameDota2,
        LeagueVideogameOverwatch,
        LeagueVideogamePUBG,
        LeagueVideogameFortnite,
        LeagueVideogameRocketLeague,
        LeagueVideogameCodmw,
        LeagueVideogameR6siege,
        LeagueVideogameFifa,
        LeagueVideogameValorant,
    ]


class BettingMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    betting_group: BettingGroup = Field(..., title='BettingGroup')
    blueprint: Blueprint = Field(..., title='Blueprint')
    bookable: MatchBookable
    booked: MatchBooked
    live_available: MatchLiveAvailable
    markets_created: MarketsCreated
    markets_updated_at: MarketsUpdatedAt
    pandascore_reviewed: MatchPandaScoreReviewed
    settled: MatchSettled


class BettingSerie(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: SerieBeginAt = Field(..., title='SerieBeginAt')
    description: SerieDescription = Field(..., title='SerieDescription')
    end_at: SerieEndAt = Field(..., title='SerieEndAt')
    full_name: SerieFullName
    id: SerieID
    league_id: LeagueID
    league_image_url: LeagueImageURL = Field(..., title='LeagueImageURL')
    league_name: LeagueName
    modified_at: SerieModifiedAt
    name: SerieName = Field(..., title='SerieName')
    season: SerieSeason = Field(..., title='SerieSeason')
    slug: SerieSlug
    tier: SerieTier = Field(..., title='SerieTier')
    videogame: CurrentVideogame
    winner_id: OpponentID = Field(..., title='OpponentID')
    winner_type: OpponentType = Field(..., title='OpponentType')
    year: SerieYear


class BettingSeries(RootModel[List[BettingSerie]]):
    root: List[BettingSerie]


class BettingTournament(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: TournamentBeginAt = Field(..., title='TournamentBeginAt')
    end_at: TournamentEndAt = Field(..., title='TournamentEndAt')
    id: TournamentID
    live_supported: TournamentLiveSupported
    modified_at: TournamentModifiedAt
    name: TournamentName
    prizepool: TournamentPrizepool = Field(..., title='TournamentPrizepool')
    serie_id: SerieID
    slug: TournamentSlug
    videogame: CurrentVideogame
    winner_id: OpponentID = Field(..., title='OpponentID')
    winner_type: OpponentType = Field(..., title='OpponentType')


class BettingTournaments(RootModel[List[BettingTournament]]):
    root: List[BettingTournament]


class BracketStanding(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    last_match: BaseMatch
    rank: StandingRank
    team: BaseTeam


class DeletionObject(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deleted_at: IncidentDeletedAt
    reason: IncidentDeletionReason
    videogame_id: VideogameID


class EsportCSGO(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id
    name: Name
    series: BettingSeries
    slug: Slug


class EsportCodmw(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id1
    name: Name1
    series: BettingSeries
    slug: Slug1


class EsportDota2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id2
    name: Name2
    series: BettingSeries
    slug: Slug2


class EsportFifa(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id3
    name: Name3
    series: BettingSeries
    slug: Slug3


class EsportFortnite(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id4
    name: Name4
    series: BettingSeries
    slug: Slug4


class EsportLoL(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id5
    name: Name5
    series: BettingSeries
    slug: Slug5


class EsportOverwatch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id6
    name: Name6
    series: BettingSeries
    slug: Slug6


class EsportPUBG(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id7
    name: Name7
    series: BettingSeries
    slug: Slug7


class EsportR6siege(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id8
    name: Name8
    series: BettingSeries
    slug: Slug8


class EsportRocketLeague(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id9
    name: Name9
    series: BettingSeries
    slug: Slug9


class EsportValorant(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id10
    name: Name10
    series: BettingSeries
    slug: Slug10


class GameWinner(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: OpponentID = Field(..., title='OpponentID')
    type: OpponentType = Field(..., title='OpponentType')


class IncidentOfTypePlayer(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    change_type: IncidentChangeType
    id: IncidentID
    modified_at: IncidentModifiedAt
    object: Player
    type: Type2


class IncidentOfTypeTeam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    change_type: IncidentChangeType
    id: IncidentID
    modified_at: IncidentModifiedAt
    object: Team
    type: Type4


class LeagueVideogame(
    RootModel[
        Union[
            LeagueVideogameLoL,
            LeagueVideogameCSGO,
            LeagueVideogameDota2,
            LeagueVideogameOverwatch,
            LeagueVideogamePUBG,
            LeagueVideogameRocketLeague,
            LeagueVideogameCodmw,
            LeagueVideogameR6siege,
            LeagueVideogameFifa,
            LeagueVideogameValorant,
        ]
    ]
):
    root: Union[
        LeagueVideogameLoL,
        LeagueVideogameCSGO,
        LeagueVideogameDota2,
        LeagueVideogameOverwatch,
        LeagueVideogamePUBG,
        LeagueVideogameRocketLeague,
        LeagueVideogameCodmw,
        LeagueVideogameR6siege,
        LeagueVideogameFifa,
        LeagueVideogameValorant,
    ]


class MarketSelection(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    line: SelectionLine = Field(..., title='SelectionLine')
    name: SelectionName
    participant_id: OpponentID = Field(..., title='OpponentID')
    participant_type: OpponentType = Field(..., title='OpponentType')
    position: SelectionPosition
    probability: SelectionProbability
    probability_with_margin: SelectionProbabilityWithMargin
    result: SelectionResult = Field(..., title='SelectionResult')
    template: SelectionTemplate


class MarketSelections(RootModel[List[MarketSelection]]):
    root: List[MarketSelection]


class MatchResult(RootModel[Union[MatchTeamResult, MatchPlayerResult]]):
    root: Union[MatchTeamResult, MatchPlayerResult]


class MatchResults(RootModel[List[MatchResult]]):
    root: List[MatchResult]


class MatchTeamOpponentsObject(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    opponent_type: OpponentTypeTeam
    opponents: Teams


class Opponent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    opponent: BaseOpponent
    type: OpponentType


class Opponents(RootModel[List[Opponent]]):
    root: List[Opponent]


class Serie(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: SerieBeginAt = Field(..., title='SerieBeginAt')
    description: SerieDescription = Field(..., title='SerieDescription')
    end_at: SerieEndAt = Field(..., title='SerieEndAt')
    full_name: SerieFullName
    id: SerieID
    league: BaseLeague
    league_id: LeagueID
    modified_at: SerieModifiedAt
    name: SerieName = Field(..., title='SerieName')
    season: SerieSeason = Field(..., title='SerieSeason')
    slug: SerieSlug
    tier: SerieTier = Field(..., title='SerieTier')
    tournaments: BaseTournaments
    videogame: CurrentVideogame
    videogame_title: VideogameTitle = Field(..., title='VideogameTitle')
    winner_id: OpponentID = Field(..., title='OpponentID')
    winner_type: OpponentType = Field(..., title='OpponentType')
    year: SerieYear


class Series(RootModel[List[Serie]]):
    root: List[Serie]


class ShortTournament(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: TournamentBeginAt = Field(..., title='TournamentBeginAt')
    end_at: TournamentEndAt = Field(..., title='TournamentEndAt')
    id: TournamentID
    league: BaseLeague
    league_id: LeagueID
    live_supported: TournamentLiveSupported
    matches: BaseMatches
    modified_at: TournamentModifiedAt
    name: TournamentName
    prizepool: TournamentPrizepool = Field(..., title='TournamentPrizepool')
    serie: BaseSerie
    serie_id: SerieID
    slug: TournamentSlug
    teams: BaseTeams
    videogame: CurrentVideogame
    winner_id: OpponentID = Field(..., title='OpponentID')
    winner_type: OpponentType = Field(..., title='OpponentType')


class ShortTournaments(RootModel[List[ShortTournament]]):
    root: List[ShortTournament]


class Standing(RootModel[Union[BracketStanding, GroupStanding]]):
    root: Union[BracketStanding, GroupStanding]


class Standings(RootModel[List[Standing]]):
    root: List[Standing]


class Tournament(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: TournamentBeginAt = Field(..., title='TournamentBeginAt')
    end_at: TournamentEndAt = Field(..., title='TournamentEndAt')
    expected_roster: TournamentRosterItems
    id: TournamentID
    league: BaseLeague
    league_id: LeagueID
    live_supported: TournamentLiveSupported
    matches: BaseMatches
    modified_at: TournamentModifiedAt
    name: TournamentName
    prizepool: TournamentPrizepool = Field(..., title='TournamentPrizepool')
    serie: BaseSerie
    serie_id: SerieID
    slug: TournamentSlug
    teams: BaseTeams
    videogame: CurrentVideogame
    winner_id: OpponentID = Field(..., title='OpponentID')
    winner_type: OpponentType = Field(..., title='OpponentType')


class TournamentRosters(
    RootModel[Union[TournamentTeamRosters, TournamentPlayerRosters]]
):
    root: Union[TournamentTeamRosters, TournamentPlayerRosters]


class VideogameLeague(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: LeagueID
    image_url: LeagueImageURL = Field(..., title='LeagueImageURL')
    modified_at: LeagueModifiedAt
    name: LeagueName
    series: BaseSeries
    slug: LeagueSlug
    url: LeagueURL = Field(..., title='LeagueURL')


class VideogameLeagues(RootModel[List[VideogameLeague]]):
    root: List[VideogameLeague]


class VideogameCSGO(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id22
    leagues: VideogameLeagues
    name: Name22
    slug: Slug22


class VideogameCodmw(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id23
    leagues: VideogameLeagues
    name: Name23
    slug: Slug23


class VideogameDota2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id24
    leagues: VideogameLeagues
    name: Name24
    slug: Slug24


class VideogameFifa(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id25
    leagues: VideogameLeagues
    name: Name25
    slug: Slug25


class VideogameLoL(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id26
    leagues: VideogameLeagues
    name: Name26
    slug: Slug26


class VideogameOverwatch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id27
    leagues: VideogameLeagues
    name: Name27
    slug: Slug27


class VideogamePUBG(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id28
    leagues: VideogameLeagues
    name: Name28
    slug: Slug28


class VideogameR6siege(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id29
    leagues: VideogameLeagues
    name: Name29
    slug: Slug29


class VideogameRocketLeague(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id30
    leagues: VideogameLeagues
    name: Name30
    slug: Slug30


class VideogameValorant(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    current_version: VideogameVersion = Field(..., title='VideogameVersion')
    id: Id31
    leagues: VideogameLeagues
    name: Name31
    slug: Slug31


class BettingCSGOGame(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: GameBeginAt = Field(..., title='GameBeginAt')
    complete: GameComplete
    detailed_stats: GameDetailedStats
    end_at: GameEndAt = Field(..., title='GameEndAt')
    finished: GameIsFinished
    forfeit: GameIsForfeit
    game_round_teams: BettingGameRoundTeams = Field(..., title='BettingGameRoundTeams')
    id: CSGOGameID
    length: GameLength = Field(..., title='GameLength')
    map: CSGOMap = Field(..., title='CSGOMap')
    match_id: MatchID
    number_of_rounds: CSGONumberOfRounds = Field(..., title='CSGONumberOfRounds')
    position: GamePosition
    status: GameStatus
    video_url: GameVideoUrl = Field(..., title='GameVideoUrl')
    winner: GameWinner
    winner_type: OpponentType = Field(..., title='OpponentType')


class BettingDota2Game(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: GameBeginAt = Field(..., title='GameBeginAt')
    complete: GameComplete
    detailed_stats: GameDetailedStats
    end_at: GameEndAt = Field(..., title='GameEndAt')
    finished: GameIsFinished
    forfeit: GameIsForfeit
    id: Dota2GameID
    length: GameLength = Field(..., title='GameLength')
    match_id: MatchID
    position: GamePosition
    status: GameStatus
    video_url: GameVideoUrl = Field(..., title='GameVideoUrl')
    winner: GameWinner
    winner_type: OpponentType = Field(..., title='OpponentType')


class BettingLeague(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: LeagueID
    image_url: LeagueImageURL = Field(..., title='LeagueImageURL')
    modified_at: LeagueModifiedAt
    name: LeagueName
    series: BaseSeries
    slug: LeagueSlug
    url: LeagueURL = Field(..., title='LeagueURL')
    videogame: BettingLeagueVideogame


class BettingLeagues(RootModel[List[BettingLeague]]):
    root: List[BettingLeague]


class BettingLoLGame(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: GameBeginAt = Field(..., title='GameBeginAt')
    complete: GameComplete
    detailed_stats: GameDetailedStats
    end_at: GameEndAt = Field(..., title='GameEndAt')
    finished: GameIsFinished
    forfeit: GameIsForfeit
    game_teams: BettingGameTeams = Field(..., title='BettingGameTeams')
    id: LoLGameID
    length: GameLength = Field(..., title='GameLength')
    match_id: MatchID
    position: GamePosition
    status: GameStatus
    video_url: GameVideoUrl = Field(..., title='GameVideoUrl')
    winner: GameWinner
    winner_type: OpponentType = Field(..., title='OpponentType')


class BettingOwGame(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: GameBeginAt = Field(..., title='GameBeginAt')
    complete: GameComplete
    detailed_stats: GameDetailedStats
    end_at: GameEndAt = Field(..., title='GameEndAt')
    finished: GameIsFinished
    forfeit: GameIsForfeit
    id: OwGameID
    length: GameLength = Field(..., title='GameLength')
    match_id: MatchID
    position: GamePosition
    status: GameStatus
    video_url: GameVideoUrl = Field(..., title='GameVideoUrl')
    winner: GameWinner
    winner_type: OpponentType = Field(..., title='OpponentType')


class BettingPUBGGame(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: GameBeginAt = Field(..., title='GameBeginAt')
    complete: GameComplete
    detailed_stats: GameDetailedStats
    end_at: GameEndAt = Field(..., title='GameEndAt')
    finished: GameIsFinished
    forfeit: GameIsForfeit
    id: PUBGGameID
    length: GameLength = Field(..., title='GameLength')
    match_id: MatchID
    position: GamePosition
    status: GameStatus
    video_url: GameVideoUrl = Field(..., title='GameVideoUrl')
    winner: GameWinner
    winner_type: OpponentType = Field(..., title='OpponentType')


class DeletionIncident(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    change_type: DeletionIncidentChangeType
    id: IncidentID
    modified_at: IncidentModifiedAt
    object: DeletionObject
    type: IncidentType


class DeletionIncidents(RootModel[List[DeletionIncident]]):
    root: List[DeletionIncident]


class Esport(
    RootModel[
        Union[
            EsportLoL,
            EsportCSGO,
            EsportDota2,
            EsportOverwatch,
            EsportPUBG,
            EsportFortnite,
            EsportRocketLeague,
            EsportCodmw,
            EsportR6siege,
            EsportFifa,
            EsportValorant,
        ]
    ]
):
    root: Union[
        EsportLoL,
        EsportCSGO,
        EsportDota2,
        EsportOverwatch,
        EsportPUBG,
        EsportFortnite,
        EsportRocketLeague,
        EsportCodmw,
        EsportR6siege,
        EsportFifa,
        EsportValorant,
    ]


class Esports(RootModel[List[Esport]]):
    root: List[Esport]


class Game(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: GameBeginAt = Field(..., title='GameBeginAt')
    complete: GameComplete
    detailed_stats: GameDetailedStats
    end_at: GameEndAt = Field(..., title='GameEndAt')
    finished: GameIsFinished
    forfeit: GameIsForfeit
    id: GameID
    length: GameLength = Field(..., title='GameLength')
    match_id: MatchID
    position: GamePosition
    status: GameStatus
    video_url: GameVideoUrl = Field(..., title='GameVideoUrl')
    winner: GameWinner
    winner_type: OpponentType = Field(..., title='OpponentType')


class Games(RootModel[List[Game]]):
    root: List[Game]


class IncidentOfTypeSerie(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    change_type: IncidentChangeType
    id: IncidentID
    modified_at: IncidentModifiedAt
    object: Serie
    type: Type3


class IncidentOfTypeTournament(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    change_type: IncidentChangeType
    id: IncidentID
    modified_at: IncidentModifiedAt
    object: Tournament
    type: Type5


class League(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: LeagueID
    image_url: LeagueImageURL = Field(..., title='LeagueImageURL')
    modified_at: LeagueModifiedAt
    name: LeagueName
    series: BaseSeries
    slug: LeagueSlug
    url: LeagueURL = Field(..., title='LeagueURL')
    videogame: LeagueVideogame


class Leagues(RootModel[List[League]]):
    root: List[League]


class Market(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: MarketID
    line: MarketLine = Field(..., title='MarketLine')
    margin: MarketMargin
    name: MarketName
    participant_id: OpponentID = Field(..., title='OpponentID')
    participant_type: OpponentType = Field(..., title='OpponentType')
    selections: MarketSelections
    status: MarketStatus
    template: MarketTemplate


class Markets(RootModel[List[Market]]):
    root: List[Market]


class Match(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: MatchBeginAt = Field(..., title='MatchBeginAt')
    detailed_stats: MatchDetailedStats
    draw: MatchIsDraw
    end_at: MatchEndAt = Field(..., title='MatchEndAt')
    forfeit: MatchIsForfeit
    game_advantage: OpponentID = Field(..., title='OpponentID')
    games: Games
    id: MatchID
    league: BaseLeague
    league_id: LeagueID
    live: MatchLive
    live_embed_url: MatchEmbedLiveVideoURLDeprecated = Field(
        ..., title='MatchEmbedLiveVideoURLDeprecated'
    )
    match_type: MatchType
    modified_at: MatchModifiedAt
    name: MatchName
    number_of_games: GameCount
    official_stream_url: MatchOfficialStreamURL = Field(
        ..., title='MatchOfficialStreamURL'
    )
    opponents: Opponents
    original_scheduled_at: MatchOriginalScheduledAt = Field(
        ..., title='MatchOriginalScheduledAt'
    )
    rescheduled: MatchIsRescheduled = Field(..., title='MatchIsRescheduled')
    results: MatchResults
    scheduled_at: MatchScheduledAt = Field(..., title='MatchScheduledAt')
    serie: BaseSerie
    serie_id: SerieID
    slug: MatchSlug = Field(..., title='MatchSlug')
    status: MatchStatus
    streams: MatchLocalizedStreams
    streams_list: StreamsList
    tournament: BaseTournament
    tournament_id: TournamentID
    videogame: CurrentVideogame
    videogame_version: ShortVideogameVersion = Field(..., title='ShortVideogameVersion')
    winner: BaseOpponent = Field(..., title='BaseOpponent')
    winner_id: OpponentID = Field(..., title='OpponentID')


class MatchMarketGame(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: GameID
    markets: Markets


class MatchMarketGames(RootModel[List[MatchMarketGame]]):
    root: List[MatchMarketGame]


class MatchMarkets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    games: MatchMarketGames
    id: MatchID
    markets: Markets


class MatchOpponentsObject(
    RootModel[Union[MatchTeamOpponentsObject, MatchPlayerOpponentsObject]]
):
    root: Union[MatchTeamOpponentsObject, MatchPlayerOpponentsObject]


class Matches(RootModel[List[Match]]):
    root: List[Match]


class Videogame(
    RootModel[
        Union[
            VideogameLoL,
            VideogameCSGO,
            VideogameDota2,
            VideogameOverwatch,
            VideogamePUBG,
            VideogameRocketLeague,
            VideogameCodmw,
            VideogameR6siege,
            VideogameFifa,
            VideogameValorant,
        ]
    ]
):
    root: Union[
        VideogameLoL,
        VideogameCSGO,
        VideogameDota2,
        VideogameOverwatch,
        VideogamePUBG,
        VideogameRocketLeague,
        VideogameCodmw,
        VideogameR6siege,
        VideogameFifa,
        VideogameValorant,
    ]


class Videogames(RootModel[List[Videogame]]):
    root: List[Videogame]


class BettingGame(
    RootModel[
        Union[
            BettingCSGOGame,
            BettingDota2Game,
            BettingLoLGame,
            BettingOwGame,
            BettingPUBGGame,
        ]
    ]
):
    root: Union[
        BettingCSGOGame,
        BettingDota2Game,
        BettingLoLGame,
        BettingOwGame,
        BettingPUBGGame,
    ]


class BettingGames(RootModel[List[BettingGame]]):
    root: List[BettingGame]


class BettingMatch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: MatchBeginAt = Field(..., title='MatchBeginAt')
    betting_metadata: BettingMetadata
    detailed_stats: MatchDetailedStats
    draw: MatchIsDraw
    end_at: MatchEndAt = Field(..., title='MatchEndAt')
    forfeit: MatchIsForfeit
    game_advantage: OpponentID = Field(..., title='OpponentID')
    games: BettingGames
    id: MatchID
    league: BettingLeague = Field(..., title='BettingLeague')
    league_id: LeagueID
    live: MatchLive
    live_embed_url: MatchEmbedLiveVideoURLDeprecated = Field(
        ..., title='MatchEmbedLiveVideoURLDeprecated'
    )
    match_type: MatchType
    modified_at: MatchModifiedAt
    name: MatchName
    number_of_games: GameCount
    official_stream_url: MatchOfficialStreamURL = Field(
        ..., title='MatchOfficialStreamURL'
    )
    opponents: Opponents
    original_scheduled_at: MatchOriginalScheduledAt = Field(
        ..., title='MatchOriginalScheduledAt'
    )
    rescheduled: MatchIsRescheduled = Field(..., title='MatchIsRescheduled')
    results: MatchResults
    scheduled_at: MatchScheduledAt = Field(..., title='MatchScheduledAt')
    serie: BettingSerie = Field(..., title='BettingSerie')
    serie_id: SerieID
    slug: MatchSlug = Field(..., title='MatchSlug')
    status: BettingMatchStatus
    streams: MatchLocalizedStreams
    streams_list: StreamsList
    tournament: BettingBaseTournament
    tournament_id: TournamentID
    videogame: CurrentVideogame
    videogame_version: ShortVideogameVersion = Field(..., title='ShortVideogameVersion')
    winner: BaseOpponent = Field(..., title='BaseOpponent')
    winner_id: OpponentID = Field(..., title='OpponentID')


class BettingMatches(RootModel[List[BettingMatch]]):
    root: List[BettingMatch]


class BettingMatchesMarkets(RootModel[List[MatchMarkets]]):
    root: List[MatchMarkets]


class Bracket(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    begin_at: MatchBeginAt = Field(..., title='MatchBeginAt')
    detailed_stats: MatchDetailedStats
    draw: MatchIsDraw
    end_at: MatchEndAt = Field(..., title='MatchEndAt')
    forfeit: MatchIsForfeit
    game_advantage: OpponentID = Field(..., title='OpponentID')
    games: Games
    id: MatchID
    live: MatchLive
    live_embed_url: MatchEmbedLiveVideoURLDeprecated = Field(
        ..., title='MatchEmbedLiveVideoURLDeprecated'
    )
    match_type: MatchType
    modified_at: MatchModifiedAt
    name: MatchName
    number_of_games: GameCount
    official_stream_url: MatchOfficialStreamURL = Field(
        ..., title='MatchOfficialStreamURL'
    )
    opponents: Opponents
    original_scheduled_at: MatchOriginalScheduledAt = Field(
        ..., title='MatchOriginalScheduledAt'
    )
    previous_matches: PreviousMatches
    scheduled_at: MatchScheduledAt = Field(..., title='MatchScheduledAt')
    slug: MatchSlug = Field(..., title='MatchSlug')
    status: MatchStatus
    streams: MatchLocalizedStreams
    streams_list: StreamsList
    tournament_id: TournamentID
    winner_id: OpponentID = Field(..., title='OpponentID')


class Brackets(RootModel[List[Bracket]]):
    root: List[Bracket]


class IncidentOfTypeLeague(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    change_type: IncidentChangeType
    id: IncidentID
    modified_at: IncidentModifiedAt
    object: League
    type: Type


class IncidentOfTypeMatch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    change_type: IncidentChangeType
    id: IncidentID
    modified_at: IncidentModifiedAt
    object: Match
    type: Type1


class Live(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    endpoints: LiveEndpoints
    event: LiveEvent = Field(..., title='LiveEvent')
    match: Match


class Lives(RootModel[List[Live]]):
    root: List[Live]


class NonDeletionIncident(
    RootModel[
        Union[
            IncidentOfTypeLeague,
            IncidentOfTypeMatch,
            IncidentOfTypePlayer,
            IncidentOfTypeSerie,
            IncidentOfTypeTeam,
            IncidentOfTypeTournament,
        ]
    ]
):
    root: Union[
        IncidentOfTypeLeague,
        IncidentOfTypeMatch,
        IncidentOfTypePlayer,
        IncidentOfTypeSerie,
        IncidentOfTypeTeam,
        IncidentOfTypeTournament,
    ]


class AdditionIncidents(RootModel[List[NonDeletionIncident]]):
    root: List[NonDeletionIncident]


class Incident(
    RootModel[
        Union[
            IncidentOfTypeLeague,
            IncidentOfTypeMatch,
            IncidentOfTypePlayer,
            IncidentOfTypeSerie,
            IncidentOfTypeTeam,
            IncidentOfTypeTournament,
            DeletionIncident,
        ]
    ]
):
    root: Union[
        IncidentOfTypeLeague,
        IncidentOfTypeMatch,
        IncidentOfTypePlayer,
        IncidentOfTypeSerie,
        IncidentOfTypeTeam,
        IncidentOfTypeTournament,
        DeletionIncident,
    ]


class Incidents(RootModel[List[Incident]]):
    root: List[Incident]


class ChangeIncidents(RootModel[List[Incident]]):
    root: List[Incident]
