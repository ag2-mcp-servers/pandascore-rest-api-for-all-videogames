# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:14:23+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity, HTTPBearer
from pydantic import conint

from models import (
    AdditionIncidents,
    AdditionsGetResponse,
    Brackets,
    ChangeIncidents,
    ChangesGetResponse,
    DeletionIncidents,
    DeletionsGetResponse,
    FilterOverBrackets,
    FilterOverLeagues,
    FilterOverMatches,
    FilterOverPlayers,
    FilterOverSeries,
    FilterOverShortTournaments,
    FilterOverShortVideogameVersions,
    FilterOverTeams,
    IncidentModifiedAt,
    Incidents,
    IncidentsGetResponse,
    League,
    LeagueIDOrSlug,
    Leagues,
    LeaguesGetResponse,
    LeaguesLeagueIdOrSlugGetResponse,
    LeaguesLeagueIdOrSlugMatchesGetResponse,
    LeaguesLeagueIdOrSlugMatchesPastGetResponse,
    LeaguesLeagueIdOrSlugMatchesRunningGetResponse,
    LeaguesLeagueIdOrSlugMatchesUpcomingGetResponse,
    LeaguesLeagueIdOrSlugSeriesGetResponse,
    LeaguesLeagueIdOrSlugTournamentsGetResponse,
    Lives,
    LivesGetResponse,
    Match,
    Matches,
    MatchesGetResponse,
    MatchesMatchIdOrSlugGetResponse,
    MatchesMatchIdOrSlugOpponentsGetResponse,
    MatchesPastGetResponse,
    MatchesRunningGetResponse,
    MatchesUpcomingGetResponse,
    MatchIDOrSlug,
    MatchOpponentsObject,
    Page1,
    Page4,
    Page7,
    Page10,
    Page13,
    Page16,
    Page19,
    Page22,
    Page25,
    Page28,
    Page31,
    Page34,
    Page37,
    Page40,
    Page43,
    Page46,
    Page49,
    Page52,
    Page55,
    Page58,
    Page61,
    Page64,
    Page67,
    Page70,
    Page73,
    Page76,
    Page79,
    Page82,
    Page85,
    Page88,
    Page91,
    Page94,
    Page97,
    Page100,
    Page103,
    Page106,
    Page109,
    Page112,
    Page115,
    Page118,
    Page121,
    Page124,
    Page127,
    Page130,
    Page133,
    Page136,
    Page139,
    Player,
    PlayerIDOrSlug,
    Players,
    PlayersGetResponse,
    PlayersPlayerIdOrSlugGetResponse,
    PlayersPlayerIdOrSlugMatchesGetResponse,
    RangeOverBrackets,
    RangeOverLeagues,
    RangeOverMatches,
    RangeOverPlayers,
    RangeOverSeries,
    RangeOverShortTournaments,
    RangeOverShortVideogameVersions,
    RangeOverTeams,
    SearchOverBrackets,
    SearchOverLeagues,
    SearchOverMatches,
    SearchOverPlayers,
    SearchOverSeries,
    SearchOverShortTournaments,
    SearchOverShortVideogameVersions,
    SearchOverTeams,
    Serie,
    SerieIDOrSlug,
    Series,
    SeriesGetResponse,
    SeriesPastGetResponse,
    SeriesRunningGetResponse,
    SeriesSerieIdOrSlugGetResponse,
    SeriesSerieIdOrSlugMatchesGetResponse,
    SeriesSerieIdOrSlugMatchesPastGetResponse,
    SeriesSerieIdOrSlugMatchesRunningGetResponse,
    SeriesSerieIdOrSlugMatchesUpcomingGetResponse,
    SeriesSerieIdOrSlugPlayersGetResponse,
    SeriesSerieIdOrSlugTournamentsGetResponse,
    SeriesUpcomingGetResponse,
    ShortTournaments,
    ShortVideogameVersions,
    SortOverBrackets,
    SortOverLeagues,
    SortOverMatches,
    SortOverPlayers,
    SortOverSeries,
    SortOverShortTournaments,
    SortOverShortVideogameVersions,
    SortOverTeams,
    Standings,
    Team,
    TeamIDOrSlug,
    Teams,
    TeamsGetResponse,
    TeamsTeamIdOrSlugGetResponse,
    TeamsTeamIdOrSlugLeaguesGetResponse,
    TeamsTeamIdOrSlugMatchesGetResponse,
    TeamsTeamIdOrSlugSeriesGetResponse,
    TeamsTeamIdOrSlugTournamentsGetResponse,
    Tournament,
    TournamentIDOrSlug,
    TournamentRosters,
    TournamentsGetResponse,
    TournamentsPastGetResponse,
    TournamentsRunningGetResponse,
    TournamentsTournamentIdOrSlugBracketsGetResponse,
    TournamentsTournamentIdOrSlugGetResponse,
    TournamentsTournamentIdOrSlugMatchesGetResponse,
    TournamentsTournamentIdOrSlugPlayersGetResponse,
    TournamentsTournamentIdOrSlugRostersGetResponse,
    TournamentsTournamentIdOrSlugStandingsGetResponse,
    TournamentsTournamentIdOrSlugTeamsGetResponse,
    TournamentsUpcomingGetResponse,
    TypeOverAdditionIncidents,
    TypeOverChangeIncidents,
    TypeOverDeletionIncidents,
    TypeOverIncidents,
    Videogame,
    VideogameIDOrSlug,
    VideogameOverAdditionIncidents,
    VideogameOverChangeIncidents,
    VideogameOverDeletionIncidents,
    VideogameOverIncidents,
    Videogames,
    VideogamesGetResponse,
    VideogamesVideogameIdOrSlugGetResponse,
    VideogamesVideogameIdOrSlugLeaguesGetResponse,
    VideogamesVideogameIdOrSlugSeriesGetResponse,
    VideogamesVideogameIdOrSlugTournamentsGetResponse,
    VideogamesVideogameIdOrSlugVersionsGetResponse,
)

app = MCPProxy(
    description='\n# Introduction\n\nWhether you\'re looking to build an official Pandascore integration for your service, or you just want to build something awesome, [we can help you get started](/home).\n\nThe API works over the HTTPS protocol, and is accessed from the `api.pandascore.co` domain.\n\n- The current endpoint is [https://api.pandascore.co](https://api.pandascore.co).\n- All data is sent and received as JSON by default.\n- Blank fields are included with `null` values instead of being omitted.\n- All timestamps are returned in ISO-8601 format\n\n### About this documentation\n\nClicking on a query parameter like `filter` or `search` will show you the available options: ![filter](/doc/images/query_param_details.jpg)\n\nYou can also click on a response to see the detailed response schema: ![response](/doc/images/response_schema.jpg)\n\n## Events hierarchy\n\nThe PandaScore API allows you to access data about eSports events by using a certain structure detailed below.\n\n**Leagues**\n\nLeagues are the top level events. They don\'t have a date and represent a regular competition. A League is composed of one or several series.  \nSome League of Legends leagues are: _EU LCS, NA LCS, LCK, etc._  \nSome Dota 2 leagues are: _ESL One, GESC, The International, PGL, etc._\n\n**Series**\n\nA Serie represents an occurrence of a league event.  \nThe EU LCS league has two series per year: _spring 2017, summer 2017, spring 2016, summer 2016 etc._  \nSome Dota2 Series examples would be: _Changsha Major, Open Bucharest, Frankfurt, i-League Invitational etc._\n\n**Tournaments**\n\nTournaments groups all the matches of a serie under "stages" and "groups".  \nThe tournaments of the EU LCS of summer 2017 are: _Group A, Group B, Playoffs, etc._  \nSome Dota 2 tournaments are: _Group A, Group B, Playoffs, etc._\n\n**Matches**\n\nFinally we have matches which have two players or teams (depending on the played videogame) and several games (the rounds of the match).  \nMatches of the group A in the EU LCS of summer 2017 are: _G2 vs FNC, MSF vs NIP, etc._  \nMatches of the group A in the ESL One, Genting tournamnet are: _Lower Round 1, Quarterfinal, Upper Final, etc._  \n\n**Please note that some matches may be listed as "TBD vs TBD" if the matchup is not announced yet, for example the date of the Final match is known but the quarterfinal is still being played.**  \n![Structure](/doc/images/structure.png)\n\n## Formats\n\n&lt;!-- The API currently supports the JSON format by default, as well as the XML format. Add the desired extension to your request URL in order to get that format. --&gt;\nThe API currently supports the JSON format by default.\n\nOther formats may be added depending on user needs.\n\n## Pagination\n\nThe Pandascore API paginates all resources on the index method.\n\nRequests that return multiple items will be paginated to 50 items by default. You can specify further pages with the `page[number]` parameter. You can also set a custom page size (up to 100) with the `page[size]` parameter.\n\nThe `Link` HTTP response header contains pagination data with `first`, `previous`, `next` and `last` raw page links when available, under the format\n\n```\nLink: &lt;https://api.pandascore.co/{Resource}?page=X+1&gt;; rel="next", &lt;https://api.pandascore.co/{Resource}?page=X-1&gt;; rel="prev", &lt;https://api.pandascore.co/{Resource}?page=1&gt;; rel="first", &lt;https://api.pandascore.co/{Resource}?page=X+n&gt;; rel="last"\n```\n\nThere is also:\n\n* A `X-Page` header field, which contains the current page.\n* A `X-Per-Page` header field, which contains the current pagination length.\n* A `X-Total` header field, which contains the total count of items across all pages.\n\n## Filtering\n\nThe `filter` query parameter can be used to filter a collection by one or several fields for one or several values. The `filter` parameter takes the field to filter as a key, and the values to filter as the value. Multiples values must be comma-separated (`,`).\n\nFor example, the following is a request for all the champions with a name matching Twitch or Brand exactly, but only with 21 armor:\n\n```\nGET /lol/champions?filter[name]=Brand,Twitch&amp;filter[armor]=21&amp;token=YOUR_ACCESS_TOKEN\n```\n\n## Range\n\nThe `range` parameter is a hash that allows filtering fields by an interval.\nOnly values between the given two comma-separated bounds will be returned. The bounds are inclusive.\n\nFor example, the following is a request for all the champions with `hp` within 500 and 1000:\n\n```\nGET /lol/champions?range[hp]=500,1000&amp;token=YOUR_ACCESS_TOKEN\n```\n\n## Search\n\nThe `search` parameter is a bit like the `filter` parameter, but it will return all results where the values **contain** the given parameter.\n\nNote: this only works on strings.\nSearching with integer values is not supported and `filter` or `range` parameters may be better suited for your needs here.\n\nFor example, to get all the champions with a name containing `"twi"`:\n\n```\n$ curl -sg -H \'Authorization: Bearer YOUR_ACCESS_TOKEN\' \'https://api.pandascore.co/lol/champions?search[name]=twi\' | jq -S \'.[].name\'\n"Twitch"\n"Twisted Fate"\n```\n\n## Sorting\n\nAll index endpoints support multiple sort fields with comma-separation (`,`); the fields are applied in the order specified.\n\nThe sort order for each field is ascending unless it is prefixed with a minus (U+002D HYPHEN-MINUS, “-“), in which case it is descending.\n\nFor example, `GET /lol/champions?sort=attackdamage,-name&amp;token=YOUR_ACCESS_TOKEN` will return all the champions sorted by attack damage.\nAny champions with the same attack damage will then be sorted by their names in descending alphabetical order.\n\n## Rate limiting\n\nDepending on your current plan, you will have a different rate limit. Your plan and your current request count [are available on your dashboard](https://pandascore.co/settings).\n\nWith the **free plan**, you have a limit of 1000 requests per hour, others plans have a limit of 4000 requests per hour. The number of remaining requests is available in the `X-Rate-Limit-Remaining` response header.\n\nYour API key is included in all the examples on this page, so you can test any example right away. **Only you can see this value.**\n\n# Authentication\n\nThe authentication on the Pandascore API works with access tokens.\n\nAll developers need to [create an account](https://pandascore.co/users/sign_in) before getting started, in order to get an access token. The access token should not be shared.\n\n**Your token can be found and regenerated from [your dashboard](https://pandascore.co/settings).**\n\nThe access token can be passed in the URL with the `token` query string parameter, or in the `Authorization: Bearer` header field.\n\n&lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;\n',
    title='PandaScore REST API for All Videogames',
    version='2.23.1',
    servers=[{'url': 'https://api.pandascore.co/', 'variables': {}}],
)


@app.get(
    '/additions',
    description=""" Get the latest additions.

This endpoint only shows unchanged objects. """,
    tags=['incident_management', 'videogame_info_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_additions(
    page: Optional[Page1] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
    type: Optional[TypeOverAdditionIncidents] = None,
    since: Optional[IncidentModifiedAt] = None,
    videogame: Optional[VideogameOverAdditionIncidents] = None,
):
    """
    List additions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/changes',
    description=""" Get the latest updates.

This endpoint only provides the latest change for an object. It does not keep track of previous changes. """,
    tags=['incident_management', 'videogame_info_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_changes(
    page: Optional[Page4] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
    type: Optional[TypeOverChangeIncidents] = None,
    since: Optional[IncidentModifiedAt] = None,
    videogame: Optional[VideogameOverChangeIncidents] = None,
):
    """
    List changes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/deletions',
    description=""" Get the latest deleted documents """,
    tags=['incident_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_deletions(
    page: Optional[Page7] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
    type: Optional[TypeOverDeletionIncidents] = None,
    since: Optional[IncidentModifiedAt] = None,
    videogame: Optional[VideogameOverDeletionIncidents] = None,
):
    """
    List deletions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/incidents',
    description="""  Get the latest updates and additions.

This endpoint only provides the latest incident for an object. It does not keep track of previous incidents. """,
    tags=['incident_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_incidents(
    page: Optional[Page10] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
    type: Optional[TypeOverIncidents] = None,
    since: Optional[IncidentModifiedAt] = None,
    videogame: Optional[VideogameOverIncidents] = None,
):
    """
    List changes, additions and deletions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/leagues',
    description=""" List leagues """,
    tags=['league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_leagues(
    search: Optional[SearchOverLeagues] = None,
    sort: Optional[SortOverLeagues] = None,
    range: Optional[RangeOverLeagues] = None,
    filter: Optional[FilterOverLeagues] = None,
    page: Optional[Page13] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    List leagues
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/leagues/{league_id_or_slug}',
    description=""" Get a single league by ID or by slug """,
    tags=['league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_leagues_league_id_or_slug(league_id_or_slug: LeagueIDOrSlug):
    """
    Get a league
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/leagues/{league_id_or_slug}/matches',
    description=""" List matches of the given league """,
    tags=['league_operations', 'match_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_leagues_league_id_or_slug_matches(
    league_id_or_slug: LeagueIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page16] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get matches for a league
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/leagues/{league_id_or_slug}/matches/past',
    description=""" List past matches for the given league """,
    tags=['league_operations', 'match_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_leagues_league_id_or_slug_matches_past(
    league_id_or_slug: LeagueIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page19] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get past matches for league
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/leagues/{league_id_or_slug}/matches/running',
    description=""" List currently running matches for the given league """,
    tags=['league_operations', 'match_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_leagues_league_id_or_slug_matches_running(
    league_id_or_slug: LeagueIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page22] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get running matches for league
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/leagues/{league_id_or_slug}/matches/upcoming',
    description=""" List upcoming matches for the given league """,
    tags=['league_operations', 'match_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_leagues_league_id_or_slug_matches_upcoming(
    league_id_or_slug: LeagueIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page25] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get upcoming matches for league
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/leagues/{league_id_or_slug}/series',
    description=""" List series for the given league """,
    tags=['league_operations', 'series_info_management', 'series_data_retrieval'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_leagues_league_id_or_slug_series(
    league_id_or_slug: LeagueIDOrSlug,
    filter: Optional[FilterOverSeries] = None,
    search: Optional[SearchOverSeries] = None,
    sort: Optional[SortOverSeries] = None,
    range: Optional[RangeOverSeries] = None,
    page: Optional[Page28] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    List series of a league
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/leagues/{league_id_or_slug}/tournaments',
    description=""" List tournaments of the given league """,
    tags=['league_operations', 'tournament_data_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_leagues_league_id_or_slug_tournaments(
    league_id_or_slug: LeagueIDOrSlug,
    filter: Optional[FilterOverShortTournaments] = None,
    search: Optional[SearchOverShortTournaments] = None,
    sort: Optional[SortOverShortTournaments] = None,
    range: Optional[RangeOverShortTournaments] = None,
    page: Optional[Page31] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get tournaments for a league
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lives',
    description=""" List currently running live matches, available from pandascore with live websocket data. """,
    tags=['match_operations', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_lives(
    page: Optional[Page34] = None, per_page: Optional[conint(ge=1, le=100)] = 50
):
    """
    List lives matches
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/matches',
    description=""" List matches """,
    tags=['match_operations', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_matches(
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page37] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    List matches
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/matches/past',
    description=""" List past matches """,
    tags=[
        'match_operations',
        'league_operations',
        'series_info_management',
        'tournament_data_management',
    ],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_matches_past(
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page40] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get past matches
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/matches/running',
    description=""" List currently running matches """,
    tags=['match_operations', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_matches_running(
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page43] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get running matches
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/matches/upcoming',
    description=""" List upcoming matches """,
    tags=[
        'match_operations',
        'league_operations',
        'series_info_management',
        'series_data_retrieval',
    ],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_matches_upcoming(
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page46] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get upcoming matches
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/matches/{match_id_or_slug}',
    description=""" Get a single match by ID or by slug """,
    tags=['match_operations', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_matches_match_id_or_slug(match_id_or_slug: MatchIDOrSlug):
    """
    Get a match
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/matches/{match_id_or_slug}/opponents',
    description=""" List opponents (player or teams) for the given match """,
    tags=['match_operations', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_matches_match_id_or_slug_opponents(match_id_or_slug: MatchIDOrSlug):
    """
    Get match's opponents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/players',
    description=""" List players """,
    tags=['player_info_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_players(
    filter: Optional[FilterOverPlayers] = None,
    search: Optional[SearchOverPlayers] = None,
    sort: Optional[SortOverPlayers] = None,
    range: Optional[RangeOverPlayers] = None,
    page: Optional[Page49] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    List players
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/players/{player_id_or_slug}',
    description=""" Get a single player by ID or by slug """,
    tags=['player_info_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_players_player_id_or_slug(player_id_or_slug: PlayerIDOrSlug):
    """
    Get a player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/players/{player_id_or_slug}/matches',
    description=""" List matches for the given player. Only matches with detailed stats. Available with the plan _Historical data_. """,
    tags=['match_operations', 'player_info_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_players_player_id_or_slug_matches(
    player_id_or_slug: PlayerIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page52] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get matches for a player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series',
    description=""" List series """,
    tags=['series_info_management', 'series_data_retrieval'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series(
    filter: Optional[FilterOverSeries] = None,
    search: Optional[SearchOverSeries] = None,
    sort: Optional[SortOverSeries] = None,
    range: Optional[RangeOverSeries] = None,
    page: Optional[Page55] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    List series
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series/past',
    description=""" List past series """,
    tags=['series_info_management', 'series_data_retrieval'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series_past(
    filter: Optional[FilterOverSeries] = None,
    search: Optional[SearchOverSeries] = None,
    sort: Optional[SortOverSeries] = None,
    range: Optional[RangeOverSeries] = None,
    page: Optional[Page58] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get past series
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series/running',
    description=""" List currently running series """,
    tags=['series_info_management', 'series_data_retrieval'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series_running(
    filter: Optional[FilterOverSeries] = None,
    search: Optional[SearchOverSeries] = None,
    sort: Optional[SortOverSeries] = None,
    range: Optional[RangeOverSeries] = None,
    page: Optional[Page61] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get running series
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series/upcoming',
    description=""" List upcoming series """,
    tags=['series_info_management', 'series_data_retrieval'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series_upcoming(
    filter: Optional[FilterOverSeries] = None,
    search: Optional[SearchOverSeries] = None,
    sort: Optional[SortOverSeries] = None,
    range: Optional[RangeOverSeries] = None,
    page: Optional[Page64] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get upcoming series
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series/{serie_id_or_slug}',
    description=""" Get a single serie by ID or by slug """,
    tags=['series_info_management', 'series_data_retrieval'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series_serie_id_or_slug(serie_id_or_slug: SerieIDOrSlug):
    """
    Get a serie
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series/{serie_id_or_slug}/matches',
    description=""" List matches of the given serie """,
    tags=['match_operations', 'series_info_management', 'series_data_retrieval'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series_serie_id_or_slug_matches(
    serie_id_or_slug: SerieIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page67] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get matches for a serie
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series/{serie_id_or_slug}/matches/past',
    description=""" List past matches for the given serie """,
    tags=[
        'league_operations',
        'match_operations',
        'series_info_management',
        'series_data_retrieval',
    ],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series_serie_id_or_slug_matches_past(
    serie_id_or_slug: SerieIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page70] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get past matches for serie
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series/{serie_id_or_slug}/matches/running',
    description=""" List currently running matches for the given serie """,
    tags=['match_operations', 'series_info_management', 'series_data_retrieval'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series_serie_id_or_slug_matches_running(
    serie_id_or_slug: SerieIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page73] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get running matches for serie
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series/{serie_id_or_slug}/matches/upcoming',
    description=""" List upcoming matches for the given serie """,
    tags=[
        'league_operations',
        'match_operations',
        'series_info_management',
        'series_data_retrieval',
    ],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series_serie_id_or_slug_matches_upcoming(
    serie_id_or_slug: SerieIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page76] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get upcoming matches for serie
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series/{serie_id_or_slug}/players',
    description=""" List players for the given serie """,
    tags=['player_info_management', 'series_info_management', 'series_data_retrieval'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series_serie_id_or_slug_players(
    filter: Optional[FilterOverPlayers] = None,
    search: Optional[SearchOverPlayers] = None,
    sort: Optional[SortOverPlayers] = None,
    range: Optional[RangeOverPlayers] = None,
    page: Optional[Page79] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
    serie_id_or_slug: str = ...,
):
    """
    Get players for a serie
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/series/{serie_id_or_slug}/tournaments',
    description=""" List tournaments of the given serie """,
    tags=[
        'league_operations',
        'series_info_management',
        'series_data_retrieval',
        'tournament_data_management',
    ],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_series_serie_id_or_slug_tournaments(
    serie_id_or_slug: SerieIDOrSlug,
    filter: Optional[FilterOverShortTournaments] = None,
    search: Optional[SearchOverShortTournaments] = None,
    sort: Optional[SortOverShortTournaments] = None,
    range: Optional[RangeOverShortTournaments] = None,
    page: Optional[Page82] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get tournaments for a serie
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams',
    description=""" List teams """,
    tags=['team_data_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_teams(
    filter: Optional[FilterOverTeams] = None,
    search: Optional[SearchOverTeams] = None,
    sort: Optional[SortOverTeams] = None,
    range: Optional[RangeOverTeams] = None,
    page: Optional[Page85] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    List teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id_or_slug}',
    description=""" Get a single team by ID or by slug """,
    tags=['team_data_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_teams_team_id_or_slug(team_id_or_slug: TeamIDOrSlug):
    """
    Get a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id_or_slug}/leagues',
    description=""" List leagues in which the given team was part of """,
    tags=['league_operations', 'team_data_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_teams_team_id_or_slug_leagues(
    team_id_or_slug: TeamIDOrSlug,
    search: Optional[SearchOverLeagues] = None,
    sort: Optional[SortOverLeagues] = None,
    range: Optional[RangeOverLeagues] = None,
    filter: Optional[FilterOverLeagues] = None,
    page: Optional[Page88] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get leagues for a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id_or_slug}/matches',
    description=""" List matches for the given team """,
    tags=['match_operations', 'team_data_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_teams_team_id_or_slug_matches(
    team_id_or_slug: TeamIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page91] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get matches for team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id_or_slug}/series',
    description=""" List series in which the given team was part of """,
    tags=['series_info_management', 'series_data_retrieval', 'team_data_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_teams_team_id_or_slug_series(
    team_id_or_slug: TeamIDOrSlug,
    filter: Optional[FilterOverSeries] = None,
    search: Optional[SearchOverSeries] = None,
    sort: Optional[SortOverSeries] = None,
    range: Optional[RangeOverSeries] = None,
    page: Optional[Page94] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get series for a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{team_id_or_slug}/tournaments',
    description=""" List tournaments in which the given team was part of """,
    tags=['team_data_management', 'tournament_data_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_teams_team_id_or_slug_tournaments(
    team_id_or_slug: TeamIDOrSlug,
    filter: Optional[FilterOverShortTournaments] = None,
    search: Optional[SearchOverShortTournaments] = None,
    sort: Optional[SortOverShortTournaments] = None,
    range: Optional[RangeOverShortTournaments] = None,
    page: Optional[Page97] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get tournaments for a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments',
    description=""" List tournaments """,
    tags=['tournament_data_management', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments(
    filter: Optional[FilterOverShortTournaments] = None,
    search: Optional[SearchOverShortTournaments] = None,
    sort: Optional[SortOverShortTournaments] = None,
    range: Optional[RangeOverShortTournaments] = None,
    page: Optional[Page100] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    List tournaments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments/past',
    description=""" List past tournaments """,
    tags=['tournament_data_management', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments_past(
    filter: Optional[FilterOverShortTournaments] = None,
    search: Optional[SearchOverShortTournaments] = None,
    sort: Optional[SortOverShortTournaments] = None,
    range: Optional[RangeOverShortTournaments] = None,
    page: Optional[Page103] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get past tournaments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments/running',
    description=""" List currently running tournaments """,
    tags=['tournament_data_management', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments_running(
    filter: Optional[FilterOverShortTournaments] = None,
    search: Optional[SearchOverShortTournaments] = None,
    sort: Optional[SortOverShortTournaments] = None,
    range: Optional[RangeOverShortTournaments] = None,
    page: Optional[Page106] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get running tournaments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments/upcoming',
    description=""" List upcoming tournaments """,
    tags=['league_operations', 'tournament_data_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments_upcoming(
    filter: Optional[FilterOverShortTournaments] = None,
    search: Optional[SearchOverShortTournaments] = None,
    sort: Optional[SortOverShortTournaments] = None,
    range: Optional[RangeOverShortTournaments] = None,
    page: Optional[Page109] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get upcoming tournaments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments/{tournament_id_or_slug}',
    description=""" Get a single tournament by ID or by slug """,
    tags=['tournament_data_management', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments_tournament_id_or_slug(tournament_id_or_slug: TournamentIDOrSlug):
    """
    Get a tournament
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments/{tournament_id_or_slug}/brackets',
    description=""" Get the brackets of the given tournament """,
    tags=['tournament_data_management', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments_tournament_id_or_slug_brackets(
    tournament_id_or_slug: TournamentIDOrSlug,
    filter: Optional[FilterOverBrackets] = None,
    range: Optional[RangeOverBrackets] = None,
    sort: Optional[SortOverBrackets] = None,
    search: Optional[SearchOverBrackets] = None,
    page: Optional[Page112] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get a tournament's brackets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments/{tournament_id_or_slug}/matches',
    description=""" List matches for the given tournament """,
    tags=['tournament_data_management', 'match_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments_tournament_id_or_slug_matches(
    tournament_id_or_slug: TournamentIDOrSlug,
    filter: Optional[FilterOverMatches] = None,
    search: Optional[SearchOverMatches] = None,
    sort: Optional[SortOverMatches] = None,
    range: Optional[RangeOverMatches] = None,
    page: Optional[Page115] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get matches for tournament
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments/{tournament_id_or_slug}/players',
    description=""" List players for the given tournament """,
    tags=['league_operations', 'player_info_management', 'tournament_data_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments_tournament_id_or_slug_players(
    filter: Optional[FilterOverPlayers] = None,
    search: Optional[SearchOverPlayers] = None,
    sort: Optional[SortOverPlayers] = None,
    range: Optional[RangeOverPlayers] = None,
    page: Optional[Page118] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
    tournament_id_or_slug: str = ...,
):
    """
    Get players for a tournament
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments/{tournament_id_or_slug}/rosters',
    description=""" List participants (player or team) for a given tournament. """,
    tags=['tournament_data_management', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments_tournament_id_or_slug_rosters(
    tournament_id_or_slug: TournamentIDOrSlug,
):
    """
    Get rosters for a tournament
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments/{tournament_id_or_slug}/standings',
    description=""" Get the current standings for a given tournament """,
    tags=['tournament_data_management', 'league_operations'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments_tournament_id_or_slug_standings(
    tournament_id_or_slug: TournamentIDOrSlug,
    page: Optional[Page121] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get tournament standings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tournaments/{tournament_id_or_slug}/teams',
    description=""" List teams for the given tournament """,
    tags=['league_operations', 'tournament_data_management', 'team_data_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_tournaments_tournament_id_or_slug_teams(
    tournament_id_or_slug: TournamentIDOrSlug,
    filter: Optional[FilterOverTeams] = None,
    search: Optional[SearchOverTeams] = None,
    sort: Optional[SortOverTeams] = None,
    range: Optional[RangeOverTeams] = None,
    page: Optional[Page124] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get teams for a tournament
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videogames',
    description=""" List videogames """,
    tags=['videogame_info_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_videogames(
    page: Optional[Page127] = None, per_page: Optional[conint(ge=1, le=100)] = 50
):
    """
    List videogames
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videogames/{videogame_id_or_slug}',
    description=""" Get a single videogame by ID or by slug """,
    tags=['videogame_info_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_videogames_videogame_id_or_slug(videogame_id_or_slug: VideogameIDOrSlug):
    """
    Get a videogame
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videogames/{videogame_id_or_slug}/leagues',
    tags=['league_operations', 'videogame_info_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_videogames_videogame_id_or_slug_leagues(
    videogame_id_or_slug: VideogameIDOrSlug,
    search: Optional[SearchOverLeagues] = None,
    sort: Optional[SortOverLeagues] = None,
    range: Optional[RangeOverLeagues] = None,
    filter: Optional[FilterOverLeagues] = None,
    page: Optional[Page130] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videogames/{videogame_id_or_slug}/series',
    description=""" List series for the given videogame """,
    tags=[
        'series_info_management',
        'series_data_retrieval',
        'videogame_info_management',
    ],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_videogames_videogame_id_or_slug_series(
    videogame_id_or_slug: VideogameIDOrSlug,
    filter: Optional[FilterOverSeries] = None,
    search: Optional[SearchOverSeries] = None,
    sort: Optional[SortOverSeries] = None,
    range: Optional[RangeOverSeries] = None,
    page: Optional[Page133] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    List series for a videogame
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videogames/{videogame_id_or_slug}/tournaments',
    description=""" List tournaments of the given videogame """,
    tags=['tournament_data_management', 'videogame_info_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_videogames_videogame_id_or_slug_tournaments(
    videogame_id_or_slug: VideogameIDOrSlug,
    filter: Optional[FilterOverShortTournaments] = None,
    range: Optional[RangeOverShortTournaments] = None,
    sort: Optional[SortOverShortTournaments] = None,
    search: Optional[SearchOverShortTournaments] = None,
    page: Optional[Page136] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    Get tournaments for a videogame
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videogames/{videogame_id_or_slug}/versions',
    description=""" List available versions for a given videogame """,
    tags=['videogame_info_management'],
    security=[
        HTTPBearer(name="None"),
        APIKeyQuery(name="token"),
    ],
)
def get_videogames_videogame_id_or_slug_versions(
    videogame_id_or_slug: VideogameIDOrSlug,
    filter: Optional[FilterOverShortVideogameVersions] = None,
    range: Optional[RangeOverShortVideogameVersions] = None,
    sort: Optional[SortOverShortVideogameVersions] = None,
    search: Optional[SearchOverShortVideogameVersions] = None,
    page: Optional[Page139] = None,
    per_page: Optional[conint(ge=1, le=100)] = 50,
):
    """
    List videogame versions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
